
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000bc8  00000c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080010a  0080010a  00000c66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d4  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fc  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cf  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000598  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d1  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003e51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 97 02 	call	0x52e	; 0x52e <main>
  9e:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_init>:
}

void PWM_init()
{
	// Timer 1
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  a6:	82 ea       	ldi	r24, 0xA2	; 162
  a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Modo Fast PWM 14, TOP = ICR1 y prescaler = 8
  ac:	8a e1       	ldi	r24, 0x1A	; 26
  ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 20000;  // Setear Top como 20ms
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	9e e4       	ldi	r25, 0x4E	; 78
  b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Timer 2
	TCCR2A = (1 << COM2A1) | (1 << COM0B1) | (1 << WGM21) | (1 << WGM20); // Configurar Fast PWM, no-inverting mode
  be:	83 ea       	ldi	r24, 0xA3	; 163
  c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22) | (1 << CS20); // Prescaler de 
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  ca:	08 95       	ret

000000cc <ADC_init>:

}

void ADC_init()
{
	ADMUX = (1 << REFS0);  // 5V de referencia
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d8:	08 95       	ret

000000da <UART_init>:
}

void UART_init()
{
	DDRD |= (1 << DDD1);	// Configuración de pines rx y tx
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;				// Configuración del serial
  e6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B |= (1 << RXCIE0) | (1<< RXEN0) | (1 << TXEN0);
  ea:	e1 ec       	ldi	r30, 0xC1	; 193
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 69       	ori	r24, 0x98	; 152
  f2:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	UBRR0 = 103;	// BAUD RATE a 9600
  fa:	87 e6       	ldi	r24, 0x67	; 103
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 106:	08 95       	ret

00000108 <setup>:

// NON-Interrupt subroutines
// Funciones de Seteo
void setup()
{
	cli();
 108:	f8 94       	cli
	DDRB = 0xFF;  // Puerto B como salida
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PIND3);  // PIND3 como salida
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	88 60       	ori	r24, 0x08	; 8
 112:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND4) | (1 << PIND5);
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	84 63       	ori	r24, 0x34	; 52
 118:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0x0F;  // Mitad de puerto C como salida
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	87 b9       	out	0x07, r24	; 7
	
	PCMSK2 |= (1 << PIND2) | (1 << PIND4) | (1 << PIND5);
 11e:	ed e6       	ldi	r30, 0x6D	; 109
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 63       	ori	r24, 0x34	; 52
 126:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE2);
 128:	e8 e6       	ldi	r30, 0x68	; 104
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 83       	st	Z, r24
	
	PWM_init();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_init>
	ADC_init();
 136:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_init>
	UART_init();
 13a:	0e 94 6d 00 	call	0xda	; 0xda <UART_init>
	
	sei();
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <ADC_read>:
	UBRR0 = 103;	// BAUD RATE a 9600
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	90 81       	ld	r25, Z
 148:	90 7f       	andi	r25, 0xF0	; 240
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	89 2b       	or	r24, r25
 14e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 64       	ori	r24, 0x40	; 64
 158:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
 15a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15e:	86 fd       	sbrc	r24, 6
 160:	fc cf       	rjmp	.-8      	; 0x15a <ADC_read+0x18>
	return ADC;                              //	Devuelve valor (10 bits)
 162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 16a:	08 95       	ret

0000016c <mapeo_servo>:

void mapeo_servo(uint8_t PWM_select, uint16_t ADC_servo1, uint16_t ADC_servo2, uint16_t* PWM_1, uint16_t* PWM_2)
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
	if ((ADC_servo1 > 450) & (ADC_servo1 < 560))
 170:	cb 01       	movw	r24, r22
 172:	83 5c       	subi	r24, 0xC3	; 195
 174:	91 40       	sbci	r25, 0x01	; 1
 176:	8d 36       	cpi	r24, 0x6D	; 109
 178:	91 05       	cpc	r25, r1
 17a:	30 f4       	brcc	.+12     	; 0x188 <mapeo_servo+0x1c>
	{
		(*PWM_1) = (490 * 4000UL) / 1023 + 1000;
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	9b e0       	ldi	r25, 0x0B	; 11
 180:	f9 01       	movw	r30, r18
 182:	91 83       	std	Z+1, r25	; 0x01
 184:	80 83       	st	Z, r24
 186:	12 c0       	rjmp	.+36     	; 0x1ac <mapeo_servo+0x40>
	}
	else if (ADC_servo1 < 450)
 188:	62 3c       	cpi	r22, 0xC2	; 194
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	7f 07       	cpc	r23, r31
 18e:	30 f4       	brcc	.+12     	; 0x19c <mapeo_servo+0x30>
	{
		(*PWM_1) = (570 * 4000UL) / 1023 + 1000;
 190:	8c e9       	ldi	r24, 0x9C	; 156
 192:	9c e0       	ldi	r25, 0x0C	; 12
 194:	f9 01       	movw	r30, r18
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <mapeo_servo+0x40>
	}
	else if (ADC_servo1 > 560)
 19c:	61 33       	cpi	r22, 0x31	; 49
 19e:	72 40       	sbci	r23, 0x02	; 2
 1a0:	28 f0       	brcs	.+10     	; 0x1ac <mapeo_servo+0x40>
	{
		(*PWM_1) = (380 * 4000UL) / 1023 + 1000;
 1a2:	85 eb       	ldi	r24, 0xB5	; 181
 1a4:	99 e0       	ldi	r25, 0x09	; 9
 1a6:	f9 01       	movw	r30, r18
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	80 83       	st	Z, r24
	}
	if ((ADC_servo2 > 450) & (ADC_servo2 < 560))
 1ac:	ca 01       	movw	r24, r20
 1ae:	83 5c       	subi	r24, 0xC3	; 195
 1b0:	91 40       	sbci	r25, 0x01	; 1
 1b2:	8d 36       	cpi	r24, 0x6D	; 109
 1b4:	91 05       	cpc	r25, r1
 1b6:	30 f4       	brcc	.+12     	; 0x1c4 <mapeo_servo+0x58>
	{
		(*PWM_2) = (580 * 4000UL) / 1023 + 1000;
 1b8:	83 ec       	ldi	r24, 0xC3	; 195
 1ba:	9c e0       	ldi	r25, 0x0C	; 12
 1bc:	f8 01       	movw	r30, r16
 1be:	91 83       	std	Z+1, r25	; 0x01
 1c0:	80 83       	st	Z, r24
 1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 < 450)
 1c4:	42 3c       	cpi	r20, 0xC2	; 194
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	5f 07       	cpc	r21, r31
 1ca:	30 f4       	brcc	.+12     	; 0x1d8 <mapeo_servo+0x6c>
	{
		(*PWM_2) = (450 * 4000UL) / 1023 + 1000;	
 1cc:	87 ec       	ldi	r24, 0xC7	; 199
 1ce:	9a e0       	ldi	r25, 0x0A	; 10
 1d0:	f8 01       	movw	r30, r16
 1d2:	91 83       	std	Z+1, r25	; 0x01
 1d4:	80 83       	st	Z, r24
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 > 560)
 1d8:	41 33       	cpi	r20, 0x31	; 49
 1da:	52 40       	sbci	r21, 0x02	; 2
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <mapeo_servo+0x7c>
	{
		(*PWM_2) = (700 * 4000UL) / 1023 + 1000;
 1de:	89 e9       	ldi	r24, 0x99	; 153
 1e0:	9e e0       	ldi	r25, 0x0E	; 14
 1e2:	f8 01       	movw	r30, r16
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
	}
	
}
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <map_servo2>:

uint16_t map_servo2(uint16_t ADC_need)
{
	uint16_t valor = ((ADC_need * 200UL / 1023) + 25);
 1ee:	9c 01       	movw	r18, r24
 1f0:	a8 ec       	ldi	r26, 0xC8	; 200
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	33 e0       	ldi	r19, 0x03	; 3
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodsi4>
	return valor;
}
 204:	c9 01       	movw	r24, r18
 206:	49 96       	adiw	r24, 0x19	; 25
 208:	08 95       	ret

0000020a <writeEEPROM>:

void writeEEPROM(uint16_t direccion, uint8_t dato) 
{
	while (EECR & (1 << EEPE));
 20a:	f9 99       	sbic	0x1f, 1	; 31
 20c:	fe cf       	rjmp	.-4      	; 0x20a <writeEEPROM>
	EEAR = direccion;
 20e:	92 bd       	out	0x22, r25	; 34
 210:	81 bd       	out	0x21, r24	; 33
	EEDR = dato;
 212:	60 bd       	out	0x20, r22	; 32
	EECR |= (1 << EEMPE);
 214:	8f b3       	in	r24, 0x1f	; 31
 216:	84 60       	ori	r24, 0x04	; 4
 218:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);
 21a:	8f b3       	in	r24, 0x1f	; 31
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8f bb       	out	0x1f, r24	; 31
 220:	08 95       	ret

00000222 <read_EEPROM>:
}

uint8_t read_EEPROM(uint16_t direccion)
{
	while (EECR & (1 << EEPE));
 222:	f9 99       	sbic	0x1f, 1	; 31
 224:	fe cf       	rjmp	.-4      	; 0x222 <read_EEPROM>
	EEAR = direccion;
 226:	92 bd       	out	0x22, r25	; 34
 228:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);
 22a:	8f b3       	in	r24, 0x1f	; 31
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
 230:	80 b5       	in	r24, 0x20	; 32
}
 232:	08 95       	ret

00000234 <save_>:

void save_(uint8_t servo, uint8_t posicion, uint16_t dato)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	d4 2f       	mov	r29, r20
	uint8_t temporal = (posicion * 8) + (servo * 2);
 23a:	26 2f       	mov	r18, r22
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	28 0f       	add	r18, r24
 248:	31 1d       	adc	r19, r1
 24a:	c2 2f       	mov	r28, r18
 24c:	cc 0f       	add	r28, r28
	writeEEPROM(temporal, (dato >> 8));
 24e:	65 2f       	mov	r22, r21
 250:	8c 2f       	mov	r24, r28
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 05 01 	call	0x20a	; 0x20a <writeEEPROM>
	temporal++;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	8c 0f       	add	r24, r28
	writeEEPROM(temporal, (dato & 0xFF));
 25c:	6d 2f       	mov	r22, r29
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 05 01 	call	0x20a	; 0x20a <writeEEPROM>
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <load_>:

uint8_t load_(uint8_t servo, uint8_t posicion, uint8_t punch)
{
	uint8_t temporal = (posicion * 8) + (servo * 2) + punch;
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	68 0f       	add	r22, r24
 276:	71 1d       	adc	r23, r1
 278:	66 0f       	add	r22, r22
 27a:	86 2f       	mov	r24, r22
 27c:	84 0f       	add	r24, r20
	return read_EEPROM(temporal);
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 11 01 	call	0x222	; 0x222 <read_EEPROM>
}
 284:	08 95       	ret

00000286 <led_on>:

void led_on(uint8_t modo, uint8_t place)
{
	if (modo == 1)
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	39 f4       	brne	.+14     	; 0x298 <led_on+0x12>
	{
		PORTB |= (1 << PORTB5);
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB4);
 290:	85 b1       	in	r24, 0x05	; 5
 292:	8f 7e       	andi	r24, 0xEF	; 239
 294:	85 b9       	out	0x05, r24	; 5
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <led_on+0x30>
	}
	else if (modo == 2)
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	39 f4       	brne	.+14     	; 0x2aa <led_on+0x24>
	{
		PORTB |= (1 << PORTB4);
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	80 61       	ori	r24, 0x10	; 16
 2a0:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB5);
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	8f 7d       	andi	r24, 0xDF	; 223
 2a6:	85 b9       	out	0x05, r24	; 5
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <led_on+0x30>
	}
	else
	{
		PORTB &= ~(1 << PORTB5);
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	8f 7d       	andi	r24, 0xDF	; 223
 2ae:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB4);
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	8f 7e       	andi	r24, 0xEF	; 239
 2b4:	85 b9       	out	0x05, r24	; 5
	}
	
	// Leds para posición
	if (place == 1)
 2b6:	61 30       	cpi	r22, 0x01	; 1
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <led_on+0x4e>
	{
		PORTC |= (1 << PORTC1);
 2ba:	88 b1       	in	r24, 0x08	; 8
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 2c0:	88 b1       	in	r24, 0x08	; 8
 2c2:	8e 7f       	andi	r24, 0xFE	; 254
 2c4:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 2c6:	88 b1       	in	r24, 0x08	; 8
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 2cc:	88 b1       	in	r24, 0x08	; 8
 2ce:	87 7f       	andi	r24, 0xF7	; 247
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	08 95       	ret
	}
	else if (place == 2)
 2d4:	62 30       	cpi	r22, 0x02	; 2
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <led_on+0x6c>
	{
		PORTC |= (1 << PORTC2);
 2d8:	88 b1       	in	r24, 0x08	; 8
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 2de:	88 b1       	in	r24, 0x08	; 8
 2e0:	8e 7f       	andi	r24, 0xFE	; 254
 2e2:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 2e4:	88 b1       	in	r24, 0x08	; 8
 2e6:	8d 7f       	andi	r24, 0xFD	; 253
 2e8:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 2ea:	88 b1       	in	r24, 0x08	; 8
 2ec:	87 7f       	andi	r24, 0xF7	; 247
 2ee:	88 b9       	out	0x08, r24	; 8
 2f0:	08 95       	ret
	}
	else if (place == 3)
 2f2:	63 30       	cpi	r22, 0x03	; 3
 2f4:	69 f4       	brne	.+26     	; 0x310 <led_on+0x8a>
	{
		PORTC |= (1 << PORTC3);
 2f6:	88 b1       	in	r24, 0x08	; 8
 2f8:	88 60       	ori	r24, 0x08	; 8
 2fa:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 302:	88 b1       	in	r24, 0x08	; 8
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 308:	88 b1       	in	r24, 0x08	; 8
 30a:	8d 7f       	andi	r24, 0xFD	; 253
 30c:	88 b9       	out	0x08, r24	; 8
 30e:	08 95       	ret
	}
	else
	{
		PORTC |= (1 << PORTC0);
 310:	88 b1       	in	r24, 0x08	; 8
 312:	81 60       	ori	r24, 0x01	; 1
 314:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 316:	88 b1       	in	r24, 0x08	; 8
 318:	8d 7f       	andi	r24, 0xFD	; 253
 31a:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	8b 7f       	andi	r24, 0xFB	; 251
 320:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 322:	88 b1       	in	r24, 0x08	; 8
 324:	87 7f       	andi	r24, 0xF7	; 247
 326:	88 b9       	out	0x08, r24	; 8
 328:	08 95       	ret

0000032a <write_char>:
	}
}

void write_char(char caracter)
{	
	while (!(UCSR0A & (1 << UDRE0)));
 32a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 32e:	95 ff       	sbrs	r25, 5
 330:	fc cf       	rjmp	.-8      	; 0x32a <write_char>
	UDR0 = caracter;
 332:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 336:	08 95       	ret

00000338 <write_str>:
}

void write_str(char* texto)
{
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) != '\0'; i++)
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	03 c0       	rjmp	.+6      	; 0x34a <write_str+0x12>
	{
		write_char(*(texto+i));
 344:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>
	UDR0 = caracter;
}

void write_str(char* texto)
{
	for(uint8_t i = 0; *(texto+i) != '\0'; i++)
 348:	cf 5f       	subi	r28, 0xFF	; 255
 34a:	f8 01       	movw	r30, r16
 34c:	ec 0f       	add	r30, r28
 34e:	f1 1d       	adc	r31, r1
 350:	80 81       	ld	r24, Z
 352:	81 11       	cpse	r24, r1
 354:	f7 cf       	rjmp	.-18     	; 0x344 <write_str+0xc>
	{
		write_char(*(texto+i));
	}
}
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <serviltime>:

void serviltime(uint16_t* servil)
{
 35e:	dc 01       	movw	r26, r24
	*(servil) = 0;
 360:	11 96       	adiw	r26, 0x01	; 1
 362:	1c 92       	st	X, r1
 364:	1e 92       	st	-X, r1
	for (uint8_t i = 1; i < largo_buff; i++)
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	1b c0       	rjmp	.+54     	; 0x3a0 <serviltime+0x42>
	{
		*(servil) = *(servil) * 10 + (buffer[i] - '0');
 36a:	2d 91       	ld	r18, X+
 36c:	3c 91       	ld	r19, X
 36e:	11 97       	sbiw	r26, 0x01	; 1
 370:	a9 01       	movw	r20, r18
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	24 0f       	add	r18, r20
 384:	35 1f       	adc	r19, r21
 386:	e9 2f       	mov	r30, r25
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	e7 5d       	subi	r30, 0xD7	; 215
 38c:	fe 4f       	sbci	r31, 0xFE	; 254
 38e:	80 81       	ld	r24, Z
 390:	28 0f       	add	r18, r24
 392:	31 1d       	adc	r19, r1
 394:	20 53       	subi	r18, 0x30	; 48
 396:	31 09       	sbc	r19, r1
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	3c 93       	st	X, r19
 39c:	2e 93       	st	-X, r18
}

void serviltime(uint16_t* servil)
{
	*(servil) = 0;
	for (uint8_t i = 1; i < largo_buff; i++)
 39e:	9f 5f       	subi	r25, 0xFF	; 255
 3a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3a4:	98 17       	cp	r25, r24
 3a6:	08 f3       	brcs	.-62     	; 0x36a <serviltime+0xc>
	{
		*(servil) = *(servil) * 10 + (buffer[i] - '0');
	}
	
	if (*(servil) > 1023)
 3a8:	8d 91       	ld	r24, X+
 3aa:	9c 91       	ld	r25, X
 3ac:	11 97       	sbiw	r26, 0x01	; 1
 3ae:	81 15       	cp	r24, r1
 3b0:	24 e0       	ldi	r18, 0x04	; 4
 3b2:	92 07       	cpc	r25, r18
 3b4:	28 f0       	brcs	.+10     	; 0x3c0 <serviltime+0x62>
	*(servil) = 1023;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	93 e0       	ldi	r25, 0x03	; 3
 3ba:	8d 93       	st	X+, r24
 3bc:	9c 93       	st	X, r25
 3be:	08 95       	ret
	else if (*(servil) < 139)
 3c0:	8b 38       	cpi	r24, 0x8B	; 139
 3c2:	91 05       	cpc	r25, r1
 3c4:	20 f4       	brcc	.+8      	; 0x3ce <serviltime+0x70>
	*(servil) = 139;
 3c6:	8b e8       	ldi	r24, 0x8B	; 139
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	8d 93       	st	X+, r24
 3cc:	9c 93       	st	X, r25
 3ce:	08 95       	ret

000003d0 <envio_datos>:
}

void envio_datos(uint16_t dato, char prefijo)
{	
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	ac 01       	movw	r20, r24
 3de:	e6 2f       	mov	r30, r22
	uint8_t cambio[4];  // Arreglo de 4 elementos
	cambio[3] = (dato % 10) + '0';              // unidades
 3e0:	9c 01       	movw	r18, r24
 3e2:	ad ec       	ldi	r26, 0xCD	; 205
 3e4:	bc ec       	ldi	r27, 0xCC	; 204
 3e6:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	96 95       	lsr	r25
 3f4:	87 95       	ror	r24
 3f6:	ec 01       	movw	r28, r24
 3f8:	cc 0f       	add	r28, r28
 3fa:	dd 1f       	adc	r29, r29
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	8c 0f       	add	r24, r28
 40a:	9d 1f       	adc	r25, r29
 40c:	28 1b       	sub	r18, r24
 40e:	39 0b       	sbc	r19, r25
 410:	c0 e3       	ldi	r28, 0x30	; 48
 412:	c2 0f       	add	r28, r18
	cambio[2] = ((dato / 10) % 10) + '0';       // decenas
 414:	9a 01       	movw	r18, r20
 416:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 41a:	8c 01       	movw	r16, r24
 41c:	16 95       	lsr	r17
 41e:	07 95       	ror	r16
 420:	16 95       	lsr	r17
 422:	07 95       	ror	r16
 424:	16 95       	lsr	r17
 426:	07 95       	ror	r16
 428:	98 01       	movw	r18, r16
 42a:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 42e:	96 95       	lsr	r25
 430:	87 95       	ror	r24
 432:	96 95       	lsr	r25
 434:	87 95       	ror	r24
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	9c 01       	movw	r18, r24
 43c:	22 0f       	add	r18, r18
 43e:	33 1f       	adc	r19, r19
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	82 0f       	add	r24, r18
 44e:	93 1f       	adc	r25, r19
 450:	98 01       	movw	r18, r16
 452:	28 1b       	sub	r18, r24
 454:	39 0b       	sbc	r19, r25
 456:	00 e3       	ldi	r16, 0x30	; 48
 458:	02 0f       	add	r16, r18
	cambio[1] = ((dato / 100) % 10) + '0';      // centenas
 45a:	9a 01       	movw	r18, r20
 45c:	36 95       	lsr	r19
 45e:	27 95       	ror	r18
 460:	36 95       	lsr	r19
 462:	27 95       	ror	r18
 464:	ab e7       	ldi	r26, 0x7B	; 123
 466:	b4 e1       	ldi	r27, 0x14	; 20
 468:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 46c:	7c 01       	movw	r14, r24
 46e:	f6 94       	lsr	r15
 470:	e7 94       	ror	r14
 472:	97 01       	movw	r18, r14
 474:	ad ec       	ldi	r26, 0xCD	; 205
 476:	bc ec       	ldi	r27, 0xCC	; 204
 478:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 47c:	96 95       	lsr	r25
 47e:	87 95       	ror	r24
 480:	96 95       	lsr	r25
 482:	87 95       	ror	r24
 484:	96 95       	lsr	r25
 486:	87 95       	ror	r24
 488:	9c 01       	movw	r18, r24
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	82 0f       	add	r24, r18
 49c:	93 1f       	adc	r25, r19
 49e:	97 01       	movw	r18, r14
 4a0:	28 1b       	sub	r18, r24
 4a2:	39 0b       	sbc	r19, r25
 4a4:	10 e3       	ldi	r17, 0x30	; 48
 4a6:	12 0f       	add	r17, r18
	cambio[0] = ((dato / 1000) % 10) + '0';     // millares
 4a8:	9a 01       	movw	r18, r20
 4aa:	36 95       	lsr	r19
 4ac:	27 95       	ror	r18
 4ae:	36 95       	lsr	r19
 4b0:	27 95       	ror	r18
 4b2:	36 95       	lsr	r19
 4b4:	27 95       	ror	r18
 4b6:	a5 ec       	ldi	r26, 0xC5	; 197
 4b8:	b0 e2       	ldi	r27, 0x20	; 32
 4ba:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 4be:	ac 01       	movw	r20, r24
 4c0:	52 95       	swap	r21
 4c2:	42 95       	swap	r20
 4c4:	4f 70       	andi	r20, 0x0F	; 15
 4c6:	45 27       	eor	r20, r21
 4c8:	5f 70       	andi	r21, 0x0F	; 15
 4ca:	45 27       	eor	r20, r21
 4cc:	9a 01       	movw	r18, r20
 4ce:	ad ec       	ldi	r26, 0xCD	; 205
 4d0:	bc ec       	ldi	r27, 0xCC	; 204
 4d2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__umulhisi3>
 4d6:	96 95       	lsr	r25
 4d8:	87 95       	ror	r24
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	9c 01       	movw	r18, r24
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	82 0f       	add	r24, r18
 4f6:	93 1f       	adc	r25, r19
 4f8:	9a 01       	movw	r18, r20
 4fa:	28 1b       	sub	r18, r24
 4fc:	39 0b       	sbc	r19, r25
 4fe:	d0 e3       	ldi	r29, 0x30	; 48
 500:	d2 0f       	add	r29, r18
	
	write_char(prefijo);
 502:	8e 2f       	mov	r24, r30
 504:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>
	write_char(cambio[0]);
 508:	8d 2f       	mov	r24, r29
 50a:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>
	write_char(cambio[1]);
 50e:	81 2f       	mov	r24, r17
 510:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>
	write_char(cambio[2]);
 514:	80 2f       	mov	r24, r16
 516:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>
	write_char(cambio[3]);
 51a:	8c 2f       	mov	r24, r28
 51c:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	08 95       	ret

0000052e <main>:
void envio_datos(uint16_t dato, char prefijo);

// MAIN LOOP
int main(void)
{
	setup();
 52e:	0e 94 84 00 	call	0x108	; 0x108 <setup>
	while (1)
	{	
		led_on(modo, place);
 532:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 536:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <modo>
 53a:	0e 94 43 01 	call	0x286	; 0x286 <led_on>
		if (modo == 0)
 53e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <modo>
 542:	81 11       	cpse	r24, r1
 544:	c2 c0       	rjmp	.+388    	; 0x6ca <main+0x19c>
		{
			if (new_data == 1)
 546:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <new_data>
 54a:	91 30       	cpi	r25, 0x01	; 1
 54c:	19 f5       	brne	.+70     	; 0x594 <main+0x66>
			{
				new_data = 0;
 54e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <new_data>
				if (buffer[0] == 'M')
 552:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 556:	9d 34       	cpi	r25, 0x4D	; 77
 558:	41 f4       	brne	.+16     	; 0x56a <main+0x3c>
				{
					if (buffer[1] == '1')
 55a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <buffer+0x1>
 55e:	81 33       	cpi	r24, 0x31	; 49
 560:	c9 f4       	brne	.+50     	; 0x594 <main+0x66>
					{
						modisimo = 1;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <modisimo>
 568:	15 c0       	rjmp	.+42     	; 0x594 <main+0x66>
					}
				}
				else if (buffer[0] == 'P')
 56a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 56e:	90 35       	cpi	r25, 0x50	; 80
 570:	89 f4       	brne	.+34     	; 0x594 <main+0x66>
				{
					if (buffer[1] == '1')
 572:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <buffer+0x1>
 576:	91 33       	cpi	r25, 0x31	; 49
 578:	21 f4       	brne	.+8      	; 0x582 <main+0x54>
					{
						estadisimo = 1;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <estadisimo>
 580:	09 c0       	rjmp	.+18     	; 0x594 <main+0x66>
					}
					else if (buffer[1] == '2')
 582:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <buffer+0x1>
 586:	92 33       	cpi	r25, 0x32	; 50
 588:	29 f4       	brne	.+10     	; 0x594 <main+0x66>
					{
						if (modo != 1)
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	19 f0       	breq	.+6      	; 0x594 <main+0x66>
						{
							habilitar = 1;
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <habilitar>
						}
					}
				}
			}
			
			if (modisimo == 1)
 594:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <modisimo>
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	21 f4       	brne	.+8      	; 0x5a4 <main+0x76>
			{
				modisimo = 0;
 59c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <modisimo>
				modo = 1;
 5a0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <modo>
			}
			
			if (estadisimo == 1)
 5a4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <estadisimo>
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	59 f4       	brne	.+22     	; 0x5c2 <main+0x94>
			{
				estadisimo = 0;
 5ac:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <estadisimo>
				place++;
 5b0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <place>
 5b4:	8f 5f       	subi	r24, 0xFF	; 255
 5b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <place>
				if (place == 4)
 5ba:	84 30       	cpi	r24, 0x04	; 4
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <main+0x94>
				{
					place = 0;
 5be:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <place>
				}
			}
			
			ADC_servo1 = ADC_read(6);
 5c2:	86 e0       	ldi	r24, 0x06	; 6
 5c4:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 5c8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <ADC_servo1+0x1>
 5cc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <ADC_servo1>
			ADC_servo2 = ADC_read(7);
 5d0:	87 e0       	ldi	r24, 0x07	; 7
 5d2:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 5d6:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <ADC_servo2+0x1>
 5da:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ADC_servo2>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 5de:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <ADC_servo1>
 5e2:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <ADC_servo1+0x1>
 5e6:	0c e1       	ldi	r16, 0x1C	; 28
 5e8:	11 e0       	ldi	r17, 0x01	; 1
 5ea:	2e e1       	ldi	r18, 0x1E	; 30
 5ec:	31 e0       	ldi	r19, 0x01	; 1
 5ee:	ac 01       	movw	r20, r24
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 5f6:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <ADC_servo2>
 5fa:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <ADC_servo2+0x1>
 5fe:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <ADC_servo1>
 602:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <ADC_servo1+0x1>
 606:	2e e1       	ldi	r18, 0x1E	; 30
 608:	31 e0       	ldi	r19, 0x01	; 1
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			
			OCR1A = PWM_1;
 610:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <PWM_1>
 614:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <PWM_1+0x1>
 618:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 61c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 620:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <PWM_2>
 624:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <PWM_2+0x1>
 628:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 62c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			ADC_servo3 = ADC_read(4);
 630:	84 e0       	ldi	r24, 0x04	; 4
 632:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 636:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADC_servo3+0x1>
 63a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADC_servo3>
			PWM_3 = map_servo2(ADC_servo3);
 63e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 642:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <PWM_3>
			
			OCR2A = PWM_3; // Setear duty cycle
 646:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			ADC_servo4 = ADC_read(5);
 64a:	85 e0       	ldi	r24, 0x05	; 5
 64c:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 650:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADC_servo4+0x1>
 654:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADC_servo4>
			PWM_4 = map_servo2(ADC_servo4);
 658:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 65c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <PWM_4>
			
			OCR2B = PWM_4; // Setear duty cycle
 660:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			
			if (habilitar == 1)
 664:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <habilitar>
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	29 f5       	brne	.+74     	; 0x6b6 <main+0x188>
			{
				save_(1, place, ADC_servo1);
 66c:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <ADC_servo1>
 670:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <ADC_servo1+0x1>
 674:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 678:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(2, place, ADC_servo2);
 67c:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <ADC_servo2>
 680:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <ADC_servo2+0x1>
 684:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(3, place, ADC_servo3);
 68e:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <ADC_servo3>
 692:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <ADC_servo3+0x1>
 696:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(4, place, ADC_servo4);
 6a0:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <ADC_servo4>
 6a4:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <ADC_servo4+0x1>
 6a8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 6ac:	84 e0       	ldi	r24, 0x04	; 4
 6ae:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				habilitar = 0;
 6b2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <habilitar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6b6:	2f ef       	ldi	r18, 0xFF	; 255
 6b8:	39 ef       	ldi	r19, 0xF9	; 249
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	21 50       	subi	r18, 0x01	; 1
 6be:	30 40       	sbci	r19, 0x00	; 0
 6c0:	80 40       	sbci	r24, 0x00	; 0
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <main+0x18e>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <main+0x198>
 6c6:	00 00       	nop
 6c8:	34 cf       	rjmp	.-408    	; 0x532 <main+0x4>
			}

			_delay_ms(20);  // Tiempo entre actualizaciones
		}
		
		else if (modo == 1)
 6ca:	81 30       	cpi	r24, 0x01	; 1
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <main+0x1a2>
 6ce:	d4 c0       	rjmp	.+424    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
		{
			if (new_data == 1)
 6d0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <new_data>
 6d4:	91 30       	cpi	r25, 0x01	; 1
 6d6:	19 f5       	brne	.+70     	; 0x71e <main+0x1f0>
			{
				new_data = 0;
 6d8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <new_data>
				if (buffer[0] == 'M')
 6dc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 6e0:	9d 34       	cpi	r25, 0x4D	; 77
 6e2:	41 f4       	brne	.+16     	; 0x6f4 <main+0x1c6>
				{
					if (buffer[1] == '1')
 6e4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <buffer+0x1>
 6e8:	81 33       	cpi	r24, 0x31	; 49
 6ea:	c9 f4       	brne	.+50     	; 0x71e <main+0x1f0>
					{
						modisimo = 1;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <modisimo>
 6f2:	15 c0       	rjmp	.+42     	; 0x71e <main+0x1f0>
					}
				}
				else if (buffer[0] == 'P')
 6f4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 6f8:	90 35       	cpi	r25, 0x50	; 80
 6fa:	89 f4       	brne	.+34     	; 0x71e <main+0x1f0>
				{
					if (buffer[1] == '1')
 6fc:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <buffer+0x1>
 700:	91 33       	cpi	r25, 0x31	; 49
 702:	21 f4       	brne	.+8      	; 0x70c <main+0x1de>
					{
						estadisimo = 1;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <estadisimo>
 70a:	09 c0       	rjmp	.+18     	; 0x71e <main+0x1f0>
					}
					else if (buffer[1] == '2')
 70c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <buffer+0x1>
 710:	92 33       	cpi	r25, 0x32	; 50
 712:	29 f4       	brne	.+10     	; 0x71e <main+0x1f0>
					{
						if (modo != 1)
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	19 f0       	breq	.+6      	; 0x71e <main+0x1f0>
						{
							habilitar = 1;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <habilitar>
						}
					}
				}
			}
			
			if (modisimo == 1)
 71e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <modisimo>
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	29 f4       	brne	.+10     	; 0x730 <main+0x202>
			{
				modisimo = 0;
 726:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <modisimo>
				modo = 2;
 72a:	82 e0       	ldi	r24, 0x02	; 2
 72c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <modo>
			}
			
			if (estadisimo == 1)
 730:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <estadisimo>
 734:	81 30       	cpi	r24, 0x01	; 1
 736:	59 f4       	brne	.+22     	; 0x74e <main+0x220>
			{
				estadisimo = 0;
 738:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <estadisimo>
				place++;
 73c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <place>
 740:	8f 5f       	subi	r24, 0xFF	; 255
 742:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <place>
				if (place == 4)
 746:	84 30       	cpi	r24, 0x04	; 4
 748:	11 f4       	brne	.+4      	; 0x74e <main+0x220>
				{
					place = 0;
 74a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <place>
				}
			}
			
			ADC_servo1 = ((load_(1, place, 0)) << 8) | (load_(1, place, 1));
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 75a:	c8 2f       	mov	r28, r24
 75c:	d0 e0       	ldi	r29, 0x00	; 0
 75e:	dc 2f       	mov	r29, r28
 760:	cc 27       	eor	r28, r28
 762:	41 e0       	ldi	r20, 0x01	; 1
 764:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 76e:	c8 2b       	or	r28, r24
 770:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <ADC_servo1+0x1>
 774:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <ADC_servo1>
			ADC_servo2 = ((load_(2, place, 0)) << 8) | (load_(2, place, 1));
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 77e:	82 e0       	ldi	r24, 0x02	; 2
 780:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 784:	48 2f       	mov	r20, r24
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	d4 2f       	mov	r29, r20
 78a:	cc 27       	eor	r28, r28
 78c:	41 e0       	ldi	r20, 0x01	; 1
 78e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 792:	82 e0       	ldi	r24, 0x02	; 2
 794:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 798:	ae 01       	movw	r20, r28
 79a:	48 2b       	or	r20, r24
 79c:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <ADC_servo2+0x1>
 7a0:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <ADC_servo2>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 7a4:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <ADC_servo1>
 7a8:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <ADC_servo1+0x1>
 7ac:	0c e1       	ldi	r16, 0x1C	; 28
 7ae:	11 e0       	ldi	r17, 0x01	; 1
 7b0:	2e e1       	ldi	r18, 0x1E	; 30
 7b2:	31 e0       	ldi	r19, 0x01	; 1
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 7ba:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <ADC_servo2>
 7be:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <ADC_servo2+0x1>
 7c2:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <ADC_servo1>
 7c6:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <ADC_servo1+0x1>
 7ca:	2e e1       	ldi	r18, 0x1E	; 30
 7cc:	31 e0       	ldi	r19, 0x01	; 1
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			OCR1A = PWM_1;
 7d4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <PWM_1>
 7d8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <PWM_1+0x1>
 7dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 7e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <PWM_2>
 7e8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <PWM_2+0x1>
 7ec:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7f0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			ADC_servo3 = ((load_(3, place, 0)) << 8) | (load_(3, place, 1));
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	d8 2f       	mov	r29, r24
 804:	cc 27       	eor	r28, r28
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 80c:	83 e0       	ldi	r24, 0x03	; 3
 80e:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 812:	9e 01       	movw	r18, r28
 814:	28 2b       	or	r18, r24
 816:	c9 01       	movw	r24, r18
 818:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADC_servo3+0x1>
 81c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADC_servo3>
			PWM_3 = map_servo2(ADC_servo3);
 820:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 824:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <PWM_3>
			OCR2A = PWM_3; // Setear duty cycle
 828:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			ADC_servo4 = ((load_(4, place, 0)) << 8) | (load_(4, place, 1));
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 832:	84 e0       	ldi	r24, 0x04	; 4
 834:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	d8 2f       	mov	r29, r24
 83c:	cc 27       	eor	r28, r28
 83e:	41 e0       	ldi	r20, 0x01	; 1
 840:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 844:	84 e0       	ldi	r24, 0x04	; 4
 846:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 84a:	9e 01       	movw	r18, r28
 84c:	28 2b       	or	r18, r24
 84e:	c9 01       	movw	r24, r18
 850:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADC_servo4+0x1>
 854:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADC_servo4>
			PWM_4 = map_servo2(ADC_servo4);
 858:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 85c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <PWM_4>
			OCR2B = PWM_4; // Setear duty cycle
 860:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 864:	3f ef       	ldi	r19, 0xFF	; 255
 866:	89 ef       	ldi	r24, 0xF9	; 249
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	31 50       	subi	r19, 0x01	; 1
 86c:	80 40       	sbci	r24, 0x00	; 0
 86e:	90 40       	sbci	r25, 0x00	; 0
 870:	e1 f7       	brne	.-8      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 872:	00 c0       	rjmp	.+0      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 874:	00 00       	nop
 876:	5d ce       	rjmp	.-838    	; 0x532 <main+0x4>

			_delay_ms(20);  // Tiempo entre actualizaciones
		}
		
		else if (modo == 2)
 878:	82 30       	cpi	r24, 0x02	; 2
 87a:	09 f0       	breq	.+2      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 87c:	5a ce       	rjmp	.-844    	; 0x532 <main+0x4>
		{
			if (new_data == 1)
 87e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <new_data>
 882:	91 30       	cpi	r25, 0x01	; 1
 884:	09 f0       	breq	.+2      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 886:	68 c0       	rjmp	.+208    	; 0x958 <__stack+0x59>
			{
				new_data = 0;
 888:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <new_data>
				if (buffer[0] == '1')
 88c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 890:	91 33       	cpi	r25, 0x31	; 49
 892:	61 f4       	brne	.+24     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
				{
					serviltime(&servil1);
 894:	83 e1       	ldi	r24, 0x13	; 19
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
					envio_datos(servil1, '1');
 89c:	61 e3       	ldi	r22, 0x31	; 49
 89e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <servil1>
 8a2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <servil1+0x1>
 8a6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <envio_datos>
 8aa:	56 c0       	rjmp	.+172    	; 0x958 <__stack+0x59>
				}
				else if (buffer[0] == '2')
 8ac:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 8b0:	92 33       	cpi	r25, 0x32	; 50
 8b2:	61 f4       	brne	.+24     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
				{
					serviltime(&servil2);
 8b4:	81 e1       	ldi	r24, 0x11	; 17
 8b6:	91 e0       	ldi	r25, 0x01	; 1
 8b8:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
					envio_datos(servil2, '2');
 8bc:	62 e3       	ldi	r22, 0x32	; 50
 8be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <servil2>
 8c2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <servil2+0x1>
 8c6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <envio_datos>
 8ca:	46 c0       	rjmp	.+140    	; 0x958 <__stack+0x59>
				}
				else if (buffer[0] == '3')
 8cc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 8d0:	93 33       	cpi	r25, 0x33	; 51
 8d2:	61 f4       	brne	.+24     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
				{
					serviltime(&servil3);
 8d4:	8f e0       	ldi	r24, 0x0F	; 15
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
					envio_datos(servil3, '3');
 8dc:	63 e3       	ldi	r22, 0x33	; 51
 8de:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <servil3>
 8e2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <servil3+0x1>
 8e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <envio_datos>
 8ea:	36 c0       	rjmp	.+108    	; 0x958 <__stack+0x59>
				}
				else if (buffer[0] == '4')
 8ec:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 8f0:	94 33       	cpi	r25, 0x34	; 52
 8f2:	61 f4       	brne	.+24     	; 0x90c <__stack+0xd>
				{
					serviltime(&servil4);
 8f4:	8d e0       	ldi	r24, 0x0D	; 13
 8f6:	91 e0       	ldi	r25, 0x01	; 1
 8f8:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
					envio_datos(servil4, '4');
 8fc:	64 e3       	ldi	r22, 0x34	; 52
 8fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <servil4>
 902:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <servil4+0x1>
 906:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <envio_datos>
 90a:	26 c0       	rjmp	.+76     	; 0x958 <__stack+0x59>
				}
				else if (buffer[0] == 'M')
 90c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 910:	9d 34       	cpi	r25, 0x4D	; 77
 912:	41 f4       	brne	.+16     	; 0x924 <__stack+0x25>
				{
					if (buffer[1] == '1')
 914:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <buffer+0x1>
 918:	81 33       	cpi	r24, 0x31	; 49
 91a:	f1 f4       	brne	.+60     	; 0x958 <__stack+0x59>
					{
						modisimo = 1;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <modisimo>
 922:	1a c0       	rjmp	.+52     	; 0x958 <__stack+0x59>
					}
				}
				else if (buffer[0] == 'P')
 924:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <buffer>
 928:	90 35       	cpi	r25, 0x50	; 80
 92a:	91 f4       	brne	.+36     	; 0x950 <__stack+0x51>
				{
					if (buffer[1] == '1')
 92c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <buffer+0x1>
 930:	91 33       	cpi	r25, 0x31	; 49
 932:	21 f4       	brne	.+8      	; 0x93c <__stack+0x3d>
					{
						estadisimo = 1;
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <estadisimo>
 93a:	0e c0       	rjmp	.+28     	; 0x958 <__stack+0x59>
					}
					else if (buffer[1] == '2')
 93c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <buffer+0x1>
 940:	92 33       	cpi	r25, 0x32	; 50
 942:	51 f4       	brne	.+20     	; 0x958 <__stack+0x59>
					{
						if (modo != 1)
 944:	81 30       	cpi	r24, 0x01	; 1
 946:	41 f0       	breq	.+16     	; 0x958 <__stack+0x59>
						{
							habilitar = 1;
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <habilitar>
 94e:	04 c0       	rjmp	.+8      	; 0x958 <__stack+0x59>
						}
					}
				}
				else
				{
					write_str("invalido");
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	91 e0       	ldi	r25, 0x01	; 1
 954:	0e 94 9c 01 	call	0x338	; 0x338 <write_str>
				}				
			}
			
			if (modisimo == 1)
 958:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <modisimo>
 95c:	81 30       	cpi	r24, 0x01	; 1
 95e:	21 f4       	brne	.+8      	; 0x968 <__stack+0x69>
			{
				modisimo = 0;
 960:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <modisimo>
				modo = 0;
 964:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <modo>
			}
			
			if (estadisimo == 1)
 968:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <estadisimo>
 96c:	81 30       	cpi	r24, 0x01	; 1
 96e:	59 f4       	brne	.+22     	; 0x986 <__stack+0x87>
			{
				estadisimo = 0;
 970:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <estadisimo>
				place++;
 974:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <place>
 978:	8f 5f       	subi	r24, 0xFF	; 255
 97a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <place>
				if (place == 4)
 97e:	84 30       	cpi	r24, 0x04	; 4
 980:	11 f4       	brne	.+4      	; 0x986 <__stack+0x87>
				{
					place = 0;
 982:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <place>
				}
			}
			
			ADC_servo1 = servil1;
 986:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <servil1>
 98a:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <servil1+0x1>
 98e:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <ADC_servo1+0x1>
 992:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <ADC_servo1>
			ADC_servo2 = servil2;
 996:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <servil2>
 99a:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <servil2+0x1>
 99e:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <ADC_servo2+0x1>
 9a2:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <ADC_servo2>
			ADC_servo3 = servil3;
 9a6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <servil3>
 9aa:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <servil3+0x1>
 9ae:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADC_servo3+0x1>
 9b2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADC_servo3>
			ADC_servo4 = servil4;
 9b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <servil4>
 9ba:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <servil4+0x1>
 9be:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADC_servo4+0x1>
 9c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADC_servo4>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 9c6:	0c e1       	ldi	r16, 0x1C	; 28
 9c8:	11 e0       	ldi	r17, 0x01	; 1
 9ca:	2e e1       	ldi	r18, 0x1E	; 30
 9cc:	31 e0       	ldi	r19, 0x01	; 1
 9ce:	81 e0       	ldi	r24, 0x01	; 1
 9d0:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 9d4:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <ADC_servo2>
 9d8:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <ADC_servo2+0x1>
 9dc:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <ADC_servo1>
 9e0:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <ADC_servo1+0x1>
 9e4:	2e e1       	ldi	r18, 0x1E	; 30
 9e6:	31 e0       	ldi	r19, 0x01	; 1
 9e8:	80 e0       	ldi	r24, 0x00	; 0
 9ea:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			OCR1A = PWM_1;
 9ee:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <PWM_1>
 9f2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <PWM_1+0x1>
 9f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 9fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 9fe:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <PWM_2>
 a02:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <PWM_2+0x1>
 a06:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 a0a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			PWM_3 = map_servo2(ADC_servo3);
 a0e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADC_servo3>
 a12:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ADC_servo3+0x1>
 a16:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 a1a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <PWM_3>
			OCR2A = PWM_3; // Setear duty cycle
 a1e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			PWM_4 = map_servo2(ADC_servo4);
 a22:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ADC_servo4>
 a26:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ADC_servo4+0x1>
 a2a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 a2e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <PWM_4>
			OCR2B = PWM_4; // Setear duty cycle
 a32:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			
			if (habilitar == 1)
 a36:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <habilitar>
 a3a:	81 30       	cpi	r24, 0x01	; 1
 a3c:	29 f5       	brne	.+74     	; 0xa88 <__stack+0x189>
			{
				save_(1, place, ADC_servo1);
 a3e:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <ADC_servo1>
 a42:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <ADC_servo1+0x1>
 a46:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 a4a:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(2, place, ADC_servo2);
 a4e:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <ADC_servo2>
 a52:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <ADC_servo2+0x1>
 a56:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 a5a:	82 e0       	ldi	r24, 0x02	; 2
 a5c:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(3, place, ADC_servo3);
 a60:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <ADC_servo3>
 a64:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <ADC_servo3+0x1>
 a68:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 a6c:	83 e0       	ldi	r24, 0x03	; 3
 a6e:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(4, place, ADC_servo4);
 a72:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <ADC_servo4>
 a76:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <ADC_servo4+0x1>
 a7a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <place>
 a7e:	84 e0       	ldi	r24, 0x04	; 4
 a80:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				habilitar = 0;
 a84:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <habilitar>
 a88:	2f ef       	ldi	r18, 0xFF	; 255
 a8a:	39 ef       	ldi	r19, 0xF9	; 249
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	21 50       	subi	r18, 0x01	; 1
 a90:	30 40       	sbci	r19, 0x00	; 0
 a92:	80 40       	sbci	r24, 0x00	; 0
 a94:	e1 f7       	brne	.-8      	; 0xa8e <__stack+0x18f>
 a96:	00 c0       	rjmp	.+0      	; 0xa98 <__stack+0x199>
 a98:	00 00       	nop
 a9a:	4b cd       	rjmp	.-1386   	; 0x532 <main+0x4>

00000a9c <__vector_5>:
	write_char(cambio[3]);
}

// Interrupt routines
ISR(PCINT2_vect)
{
 a9c:	1f 92       	push	r1
 a9e:	0f 92       	push	r0
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	0f 92       	push	r0
 aa4:	11 24       	eor	r1, r1
 aa6:	8f 93       	push	r24
 aa8:	9f 93       	push	r25
	cli();
 aaa:	f8 94       	cli
 aac:	8f e3       	ldi	r24, 0x3F	; 63
 aae:	9c e9       	ldi	r25, 0x9C	; 156
 ab0:	01 97       	sbiw	r24, 0x01	; 1
 ab2:	f1 f7       	brne	.-4      	; 0xab0 <__vector_5+0x14>
 ab4:	00 c0       	rjmp	.+0      	; 0xab6 <__vector_5+0x1a>
 ab6:	00 00       	nop
	
	_delay_ms(10);
	// Si el pin está encendido en el pin 2 incrementa
	if (!(PIND & (1 << PORTD2)))
 ab8:	4a 99       	sbic	0x09, 2	; 9
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <__vector_5+0x28>
	{
		modisimo = 1;
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <modisimo>
 ac2:	0f c0       	rjmp	.+30     	; 0xae2 <__vector_5+0x46>
	}
	
	// Si el pin está encendido en el pin 4 incrementa
	else if (!(PIND & (1 << PORTD4)))
 ac4:	4c 99       	sbic	0x09, 4	; 9
 ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__vector_5+0x34>
	{
		estadisimo = 1; 
 ac8:	81 e0       	ldi	r24, 0x01	; 1
 aca:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <estadisimo>
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <__vector_5+0x46>
	}
	
	// Si el pin está encendido en el pin 5 decrementa
	else if (!(PIND & (1 << PORTD5)))
 ad0:	4d 99       	sbic	0x09, 5	; 9
 ad2:	07 c0       	rjmp	.+14     	; 0xae2 <__vector_5+0x46>
	{
		if (modo != 1)
 ad4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <modo>
 ad8:	81 30       	cpi	r24, 0x01	; 1
 ada:	19 f0       	breq	.+6      	; 0xae2 <__vector_5+0x46>
		{
			habilitar = 1;	
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <habilitar>
		}
	}
	sei();
 ae2:	78 94       	sei
}
 ae4:	9f 91       	pop	r25
 ae6:	8f 91       	pop	r24
 ae8:	0f 90       	pop	r0
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	0f 90       	pop	r0
 aee:	1f 90       	pop	r1
 af0:	18 95       	reti

00000af2 <__vector_18>:

ISR(USART_RX_vect)
{
 af2:	1f 92       	push	r1
 af4:	0f 92       	push	r0
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	0f 92       	push	r0
 afa:	11 24       	eor	r1, r1
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
 b00:	ef 93       	push	r30
 b02:	ff 93       	push	r31
	cli();
 b04:	f8 94       	cli
	
	comando = UDR0;
 b06:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 b0a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <comando>
	
	if (comando == ',') // Si la cadena termina en el caracter de "enter" entra al if
 b0e:	8c 32       	cpi	r24, 0x2C	; 44
 b10:	81 f4       	brne	.+32     	; 0xb32 <__vector_18+0x40>
	{
		buffer[indice] = '\0';	// Termina el string
 b12:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <indice>
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	e7 5d       	subi	r30, 0xD7	; 215
 b1a:	fe 4f       	sbci	r31, 0xFE	; 254
 b1c:	10 82       	st	Z, r1
		new_data = 1;					// Enciende la bandera de UART
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <new_data>
		largo_buff = indice;
 b24:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <indice>
 b28:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		indice = 0;				// Reinicia el índice del buffer
 b2c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <indice>
 b30:	0e c0       	rjmp	.+28     	; 0xb4e <__vector_18+0x5c>
	}
	else
	{
		if (indice < sizeof(buffer) - 1) // Mientras que el índice del caracter recibido sea menor que el tamaño de la lista (Buffer) entra al if
 b32:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <indice>
 b36:	99 30       	cpi	r25, 0x09	; 9
 b38:	50 f4       	brcc	.+20     	; 0xb4e <__vector_18+0x5c>
		{
			buffer[indice++] = comando;	// Guarda en la lista el caracter recibido y suma uno al índice de la lista
 b3a:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <indice>
 b3e:	91 e0       	ldi	r25, 0x01	; 1
 b40:	9e 0f       	add	r25, r30
 b42:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <indice>
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	e7 5d       	subi	r30, 0xD7	; 215
 b4a:	fe 4f       	sbci	r31, 0xFE	; 254
 b4c:	80 83       	st	Z, r24
		}
	}

	
	sei();
 b4e:	78 94       	sei
 b50:	ff 91       	pop	r31
 b52:	ef 91       	pop	r30
 b54:	9f 91       	pop	r25
 b56:	8f 91       	pop	r24
 b58:	0f 90       	pop	r0
 b5a:	0f be       	out	0x3f, r0	; 63
 b5c:	0f 90       	pop	r0
 b5e:	1f 90       	pop	r1
 b60:	18 95       	reti

00000b62 <__udivmodsi4>:
 b62:	a1 e2       	ldi	r26, 0x21	; 33
 b64:	1a 2e       	mov	r1, r26
 b66:	aa 1b       	sub	r26, r26
 b68:	bb 1b       	sub	r27, r27
 b6a:	fd 01       	movw	r30, r26
 b6c:	0d c0       	rjmp	.+26     	; 0xb88 <__udivmodsi4_ep>

00000b6e <__udivmodsi4_loop>:
 b6e:	aa 1f       	adc	r26, r26
 b70:	bb 1f       	adc	r27, r27
 b72:	ee 1f       	adc	r30, r30
 b74:	ff 1f       	adc	r31, r31
 b76:	a2 17       	cp	r26, r18
 b78:	b3 07       	cpc	r27, r19
 b7a:	e4 07       	cpc	r30, r20
 b7c:	f5 07       	cpc	r31, r21
 b7e:	20 f0       	brcs	.+8      	; 0xb88 <__udivmodsi4_ep>
 b80:	a2 1b       	sub	r26, r18
 b82:	b3 0b       	sbc	r27, r19
 b84:	e4 0b       	sbc	r30, r20
 b86:	f5 0b       	sbc	r31, r21

00000b88 <__udivmodsi4_ep>:
 b88:	66 1f       	adc	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	1a 94       	dec	r1
 b92:	69 f7       	brne	.-38     	; 0xb6e <__udivmodsi4_loop>
 b94:	60 95       	com	r22
 b96:	70 95       	com	r23
 b98:	80 95       	com	r24
 b9a:	90 95       	com	r25
 b9c:	9b 01       	movw	r18, r22
 b9e:	ac 01       	movw	r20, r24
 ba0:	bd 01       	movw	r22, r26
 ba2:	cf 01       	movw	r24, r30
 ba4:	08 95       	ret

00000ba6 <__umulhisi3>:
 ba6:	a2 9f       	mul	r26, r18
 ba8:	b0 01       	movw	r22, r0
 baa:	b3 9f       	mul	r27, r19
 bac:	c0 01       	movw	r24, r0
 bae:	a3 9f       	mul	r26, r19
 bb0:	70 0d       	add	r23, r0
 bb2:	81 1d       	adc	r24, r1
 bb4:	11 24       	eor	r1, r1
 bb6:	91 1d       	adc	r25, r1
 bb8:	b2 9f       	mul	r27, r18
 bba:	70 0d       	add	r23, r0
 bbc:	81 1d       	adc	r24, r1
 bbe:	11 24       	eor	r1, r1
 bc0:	91 1d       	adc	r25, r1
 bc2:	08 95       	ret

00000bc4 <_exit>:
 bc4:	f8 94       	cli

00000bc6 <__stop_program>:
 bc6:	ff cf       	rjmp	.-2      	; 0xbc6 <__stop_program>
