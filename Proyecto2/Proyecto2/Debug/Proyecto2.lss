
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000949  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075d  00000000  00000000  00000d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ee  00000000  00000000  0000148e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fa  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  9e:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_init>:
void TMR0_init()
{
	
	//TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 1024
	TIMSK0 = (1 << TOIE0);
	TCNT0 = TMR_val;
  a6:	82 ea       	ldi	r24, 0xA2	; 162
  a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  ac:	8a e1       	ldi	r24, 0x1A	; 26
  ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	9e e4       	ldi	r25, 0x4E	; 78
  b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  be:	08 95       	ret

000000c0 <ADC_init>:
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  c6:	86 e8       	ldi	r24, 0x86	; 134
  c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  cc:	08 95       	ret

000000ce <setup>:
  ce:	f8 94       	cli
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	8e 61       	ori	r24, 0x1E	; 30
  d4:	84 b9       	out	0x04, r24	; 4
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_init>
  da:	0e 94 60 00 	call	0xc0	; 0xc0 <ADC_init>
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <ADC_read>:
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	89 2b       	or	r24, r25
  ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
  fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fe:	86 fd       	sbrc	r24, 6
 100:	fc cf       	rjmp	.-8      	; 0xfa <ADC_read+0x18>
	return ADC;                              // Devuelve valor (10 bits)
 102:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 106:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 10a:	08 95       	ret

0000010c <mapeo_servo>:

void mapeo_servo(uint8_t PWM_select, uint16_t ADC_servo1, uint16_t ADC_servo2, uint16_t* PWM_1, uint16_t* PWM_2)
{
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
	if ((ADC_servo1 > 450) & (ADC_servo1 < 560))
 110:	cb 01       	movw	r24, r22
 112:	83 5c       	subi	r24, 0xC3	; 195
 114:	91 40       	sbci	r25, 0x01	; 1
 116:	8d 36       	cpi	r24, 0x6D	; 109
 118:	91 05       	cpc	r25, r1
 11a:	30 f4       	brcc	.+12     	; 0x128 <mapeo_servo+0x1c>
	{
		(*PWM_1) = (490 * 4000UL) / 1023 + 1000;
 11c:	83 e6       	ldi	r24, 0x63	; 99
 11e:	9b e0       	ldi	r25, 0x0B	; 11
 120:	f9 01       	movw	r30, r18
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
 126:	12 c0       	rjmp	.+36     	; 0x14c <mapeo_servo+0x40>
	}
	else if (ADC_servo1 < 450)
 128:	62 3c       	cpi	r22, 0xC2	; 194
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	7f 07       	cpc	r23, r31
 12e:	30 f4       	brcc	.+12     	; 0x13c <mapeo_servo+0x30>
	{
		(*PWM_1) = (570 * 4000UL) / 1023 + 1000;
 130:	8c e9       	ldi	r24, 0x9C	; 156
 132:	9c e0       	ldi	r25, 0x0C	; 12
 134:	f9 01       	movw	r30, r18
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
 13a:	08 c0       	rjmp	.+16     	; 0x14c <mapeo_servo+0x40>
	}
	else if (ADC_servo1 > 560)
 13c:	61 33       	cpi	r22, 0x31	; 49
 13e:	72 40       	sbci	r23, 0x02	; 2
 140:	28 f0       	brcs	.+10     	; 0x14c <mapeo_servo+0x40>
	{
		(*PWM_1) = (380 * 4000UL) / 1023 + 1000;
 142:	85 eb       	ldi	r24, 0xB5	; 181
 144:	99 e0       	ldi	r25, 0x09	; 9
 146:	f9 01       	movw	r30, r18
 148:	91 83       	std	Z+1, r25	; 0x01
 14a:	80 83       	st	Z, r24
	}
	if ((ADC_servo2 > 450) & (ADC_servo2 < 560))
 14c:	ca 01       	movw	r24, r20
 14e:	83 5c       	subi	r24, 0xC3	; 195
 150:	91 40       	sbci	r25, 0x01	; 1
 152:	8d 36       	cpi	r24, 0x6D	; 109
 154:	91 05       	cpc	r25, r1
 156:	30 f4       	brcc	.+12     	; 0x164 <mapeo_servo+0x58>
	{
		(*PWM_2) = (580 * 4000UL) / 1023 + 1000;
 158:	83 ec       	ldi	r24, 0xC3	; 195
 15a:	9c e0       	ldi	r25, 0x0C	; 12
 15c:	f8 01       	movw	r30, r16
 15e:	91 83       	std	Z+1, r25	; 0x01
 160:	80 83       	st	Z, r24
 162:	12 c0       	rjmp	.+36     	; 0x188 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 < 450)
 164:	42 3c       	cpi	r20, 0xC2	; 194
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	5f 07       	cpc	r21, r31
 16a:	30 f4       	brcc	.+12     	; 0x178 <mapeo_servo+0x6c>
	{
		(*PWM_2) = (450 * 4000UL) / 1023 + 1000;
 16c:	87 ec       	ldi	r24, 0xC7	; 199
 16e:	9a e0       	ldi	r25, 0x0A	; 10
 170:	f8 01       	movw	r30, r16
 172:	91 83       	std	Z+1, r25	; 0x01
 174:	80 83       	st	Z, r24
 176:	08 c0       	rjmp	.+16     	; 0x188 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 > 560)
 178:	41 33       	cpi	r20, 0x31	; 49
 17a:	52 40       	sbci	r21, 0x02	; 2
 17c:	28 f0       	brcs	.+10     	; 0x188 <mapeo_servo+0x7c>
	{
		(*PWM_2) = (700 * 4000UL) / 1023 + 1000;
 17e:	89 e9       	ldi	r24, 0x99	; 153
 180:	9e e0       	ldi	r25, 0x0E	; 14
 182:	f8 01       	movw	r30, r16
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
	}
	
}
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <main>:
uint16_t momento = 0;

// MAIN LOOP
int main(void)
{
	setup();
 18e:	0e 94 67 00 	call	0xce	; 0xce <setup>
	while (1)
	{	
		ADC_servo1 = ADC_read(6);
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_read>
 198:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ADC_servo1+0x1>
 19c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADC_servo1>
		ADC_servo2 = ADC_read(7);
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_read>
 1a6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ADC_servo2+0x1>
 1aa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADC_servo2>
		
		mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 1ae:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <ADC_servo1>
 1b2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <ADC_servo1+0x1>
 1b6:	06 e0       	ldi	r16, 0x06	; 6
 1b8:	11 e0       	ldi	r17, 0x01	; 1
 1ba:	28 e0       	ldi	r18, 0x08	; 8
 1bc:	31 e0       	ldi	r19, 0x01	; 1
 1be:	ac 01       	movw	r20, r24
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 86 00 	call	0x10c	; 0x10c <mapeo_servo>
		mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 1c6:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <ADC_servo2>
 1ca:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <ADC_servo2+0x1>
 1ce:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <ADC_servo1>
 1d2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <ADC_servo1+0x1>
 1d6:	28 e0       	ldi	r18, 0x08	; 8
 1d8:	31 e0       	ldi	r19, 0x01	; 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 86 00 	call	0x10c	; 0x10c <mapeo_servo>
		
		OCR1A = PWM_1;
 1e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PWM_1>
 1e4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PWM_1+0x1>
 1e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = PWM_2;
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PWM_2>
 1f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <PWM_2+0x1>
 1f8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1fc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x78>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x82>
 210:	00 00       	nop
 212:	bf cf       	rjmp	.-130    	; 0x192 <main+0x4>

00000214 <__vector_16>:
	
}

// Interrupt routines
ISR(TIMER0_OVF_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
	cli();
 226:	f8 94       	cli
	
	momento++;
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 22c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 236:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (momento == 20000)
 23a:	80 32       	cpi	r24, 0x20	; 32
 23c:	9e 44       	sbci	r25, 0x4E	; 78
 23e:	21 f4       	brne	.+8      	; 0x248 <__vector_16+0x34>
	{
		momento = 0;  // Encender LED
 240:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 244:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	
	if (momento < PWM_3)
 248:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 24c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 250:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PWM_3>
 254:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PWM_3+0x1>
 258:	28 17       	cp	r18, r24
 25a:	39 07       	cpc	r19, r25
 25c:	20 f4       	brcc	.+8      	; 0x266 <__vector_16+0x52>
	{
		PORTB |= (1 << PORTB3);  // Encender LED
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	88 60       	ori	r24, 0x08	; 8
 262:	85 b9       	out	0x05, r24	; 5
 264:	03 c0       	rjmp	.+6      	; 0x26c <__vector_16+0x58>
	}
	else
	{
		PORTB &= ~(1 << PORTB3); // Apagar LED
 266:	85 b1       	in	r24, 0x05	; 5
 268:	87 7f       	andi	r24, 0xF7	; 247
 26a:	85 b9       	out	0x05, r24	; 5
	}
	
	TCNT0 = TMR_val;  // Precarga el timer
 26c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 270:	86 bd       	out	0x26, r24	; 38
	
	sei();
 272:	78 94       	sei
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
