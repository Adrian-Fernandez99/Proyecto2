
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a7  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000745  00000000  00000000  00000bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000385  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  00001b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  88:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_init>:
	sei();
}

void PWM_init()
{
	DDRB |= (1 << PINB1) | (1 << PINB2);  // D9 y D10 como salida
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4
	
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Modo Fast PWM 14, TOP = ICR1 y prescaler = 8
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 20000;  // Setear Top como 20ms
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ae:	08 95       	ret

000000b0 <ADC_init>:
}

void ADC_init()
{
	ADMUX = (1 << REFS0);  // 5V de referencia
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  bc:	08 95       	ret

000000be <setup>:

// NON-Interrupt subroutines
// Funciones de Seteo
void setup()
{
	cli();
  be:	f8 94       	cli
	PWM_init();
  c0:	0e 94 48 00 	call	0x90	; 0x90 <PWM_init>
	ADC_init();
  c4:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_init>
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <ADC_read>:
}


uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	89 2b       	or	r24, r25
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
  e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e8:	86 fd       	sbrc	r24, 6
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <ADC_read+0x18>
	return ADC;                              // Devuelve valor (10 bits)
  ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  f4:	08 95       	ret

000000f6 <mapeo_servo>:

void mapeo_servo(uint8_t PWM_select, uint16_t ADC_servo1, uint16_t ADC_servo2, uint16_t* PWM_1, uint16_t* PWM_2)
{
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
	if (PWM_select == 0)
  fa:	81 11       	cpse	r24, r1
  fc:	1f c0       	rjmp	.+62     	; 0x13c <mapeo_servo+0x46>
	{
		if ((ADC_servo1 > 450) & (ADC_servo1 < 560))
  fe:	cb 01       	movw	r24, r22
 100:	83 5c       	subi	r24, 0xC3	; 195
 102:	91 40       	sbci	r25, 0x01	; 1
 104:	8d 36       	cpi	r24, 0x6D	; 109
 106:	91 05       	cpc	r25, r1
 108:	30 f4       	brcc	.+12     	; 0x116 <mapeo_servo+0x20>
		{
			(*PWM_1) = (490 * 4000UL) / 1023 + 1000;
 10a:	83 e6       	ldi	r24, 0x63	; 99
 10c:	9b e0       	ldi	r25, 0x0B	; 11
 10e:	f9 01       	movw	r30, r18
 110:	91 83       	std	Z+1, r25	; 0x01
 112:	80 83       	st	Z, r24
 114:	32 c0       	rjmp	.+100    	; 0x17a <mapeo_servo+0x84>
		}
		else if (ADC_servo1 < 450)
 116:	62 3c       	cpi	r22, 0xC2	; 194
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	7f 07       	cpc	r23, r31
 11c:	30 f4       	brcc	.+12     	; 0x12a <mapeo_servo+0x34>
		{
			(*PWM_1) = (380 * 4000UL) / 1023 + 1000;
 11e:	85 eb       	ldi	r24, 0xB5	; 181
 120:	99 e0       	ldi	r25, 0x09	; 9
 122:	f9 01       	movw	r30, r18
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
 128:	28 c0       	rjmp	.+80     	; 0x17a <mapeo_servo+0x84>
		}
		else if (ADC_servo1 > 560)
 12a:	61 33       	cpi	r22, 0x31	; 49
 12c:	72 40       	sbci	r23, 0x02	; 2
 12e:	28 f1       	brcs	.+74     	; 0x17a <mapeo_servo+0x84>
		{
			(*PWM_1) = (570 * 4000UL) / 1023 + 1000;
 130:	8c e9       	ldi	r24, 0x9C	; 156
 132:	9c e0       	ldi	r25, 0x0C	; 12
 134:	f9 01       	movw	r30, r18
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24
 13a:	1f c0       	rjmp	.+62     	; 0x17a <mapeo_servo+0x84>
		}
	}
	else if (PWM_select == 1)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	e9 f4       	brne	.+58     	; 0x17a <mapeo_servo+0x84>
	{
		if ((ADC_servo2 > 450) & (ADC_servo2 < 560))
 140:	43 5c       	subi	r20, 0xC3	; 195
 142:	51 40       	sbci	r21, 0x01	; 1
 144:	4d 36       	cpi	r20, 0x6D	; 109
 146:	51 05       	cpc	r21, r1
 148:	30 f4       	brcc	.+12     	; 0x156 <mapeo_servo+0x60>
		{
			(*PWM_2) = (580 * 4000UL) / 1023 + 1000;
 14a:	83 ec       	ldi	r24, 0xC3	; 195
 14c:	9c e0       	ldi	r25, 0x0C	; 12
 14e:	f8 01       	movw	r30, r16
 150:	91 83       	std	Z+1, r25	; 0x01
 152:	80 83       	st	Z, r24
 154:	12 c0       	rjmp	.+36     	; 0x17a <mapeo_servo+0x84>
		}
		else if (ADC_servo1 < 450)
 156:	62 3c       	cpi	r22, 0xC2	; 194
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	7f 07       	cpc	r23, r31
 15c:	30 f4       	brcc	.+12     	; 0x16a <mapeo_servo+0x74>
		{
			(*PWM_2) = (470 * 4000UL) / 1023 + 1000;
 15e:	85 e1       	ldi	r24, 0x15	; 21
 160:	9b e0       	ldi	r25, 0x0B	; 11
 162:	f8 01       	movw	r30, r16
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	80 83       	st	Z, r24
 168:	08 c0       	rjmp	.+16     	; 0x17a <mapeo_servo+0x84>
		}
		else if (ADC_servo1 > 560)
 16a:	61 33       	cpi	r22, 0x31	; 49
 16c:	72 40       	sbci	r23, 0x02	; 2
 16e:	28 f0       	brcs	.+10     	; 0x17a <mapeo_servo+0x84>
		{
			(*PWM_2) = (660 * 4000UL) / 1023 + 1000;
 170:	8c ef       	ldi	r24, 0xFC	; 252
 172:	9d e0       	ldi	r25, 0x0D	; 13
 174:	f8 01       	movw	r30, r16
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	80 83       	st	Z, r24
		}
	}
}
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	08 95       	ret

00000180 <main>:
uint16_t PWM_2 = 0;

// MAIN LOOP
int main(void)
{
	setup();
 180:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
	while (1)
	{	
		ADC_servo1 = ADC_read(6);
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_read>
 18a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ADC_servo1+0x1>
 18e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADC_servo1>
		ADC_servo2 = ADC_read(7);
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_read>
 198:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADC_servo2+0x1>
 19c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADC_servo2>
		
		mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 1a0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ADC_servo1>
 1a4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <ADC_servo1+0x1>
 1a8:	00 e0       	ldi	r16, 0x00	; 0
 1aa:	11 e0       	ldi	r17, 0x01	; 1
 1ac:	22 e0       	ldi	r18, 0x02	; 2
 1ae:	31 e0       	ldi	r19, 0x01	; 1
 1b0:	ac 01       	movw	r20, r24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 7b 00 	call	0xf6	; 0xf6 <mapeo_servo>
		
		OCR1A = PWM_1;
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PWM_1>
 1bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PWM_1+0x1>
 1c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = PWM_2;
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1d4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	89 ef       	ldi	r24, 0xF9	; 249
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	80 40       	sbci	r24, 0x00	; 0
 1e2:	90 40       	sbci	r25, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x5e>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x68>
 1e8:	00 00       	nop
 1ea:	cc cf       	rjmp	.-104    	; 0x184 <main+0x4>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
