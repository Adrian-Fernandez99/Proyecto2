
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096f  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075d  00000000  00000000  00000d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  00001dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  88:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_init>:
	ADMUX = (1 << REFS0);  // 5V de referencia
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
}

void TMR0_init()
{
  90:	82 ea       	ldi	r24, 0xA2	; 162
  92:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  96:	8a e1       	ldi	r24, 0x1A	; 26
  98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	9e e4       	ldi	r25, 0x4E	; 78
  a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  a8:	83 ea       	ldi	r24, 0xA3	; 163
  aa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  b4:	08 95       	ret

000000b6 <ADC_init>:
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  bc:	86 e8       	ldi	r24, 0x86	; 134
  be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c2:	08 95       	ret

000000c4 <setup>:
  c4:	f8 94       	cli
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	8e 61       	ori	r24, 0x1E	; 30
  ca:	84 b9       	out	0x04, r24	; 4
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	0e 94 48 00 	call	0x90	; 0x90 <PWM_init>
  d6:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_init>
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <ADC_read>:
	
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	89 2b       	or	r24, r25
  ea:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
  f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  fa:	86 fd       	sbrc	r24, 6
  fc:	fc cf       	rjmp	.-8      	; 0xf6 <ADC_read+0x18>
	return ADC;                              // Devuelve valor (10 bits)
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 102:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 106:	08 95       	ret

00000108 <mapeo_servo>:

void mapeo_servo(uint8_t PWM_select, uint16_t ADC_servo1, uint16_t ADC_servo2, uint16_t* PWM_1, uint16_t* PWM_2)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
	if ((ADC_servo1 > 450) & (ADC_servo1 < 560))
 10c:	cb 01       	movw	r24, r22
 10e:	83 5c       	subi	r24, 0xC3	; 195
 110:	91 40       	sbci	r25, 0x01	; 1
 112:	8d 36       	cpi	r24, 0x6D	; 109
 114:	91 05       	cpc	r25, r1
 116:	30 f4       	brcc	.+12     	; 0x124 <mapeo_servo+0x1c>
	{
		(*PWM_1) = (490 * 4000UL) / 1023 + 1000;
 118:	83 e6       	ldi	r24, 0x63	; 99
 11a:	9b e0       	ldi	r25, 0x0B	; 11
 11c:	f9 01       	movw	r30, r18
 11e:	91 83       	std	Z+1, r25	; 0x01
 120:	80 83       	st	Z, r24
 122:	12 c0       	rjmp	.+36     	; 0x148 <mapeo_servo+0x40>
	}
	else if (ADC_servo1 < 450)
 124:	62 3c       	cpi	r22, 0xC2	; 194
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	7f 07       	cpc	r23, r31
 12a:	30 f4       	brcc	.+12     	; 0x138 <mapeo_servo+0x30>
	{
		(*PWM_1) = (570 * 4000UL) / 1023 + 1000;
 12c:	8c e9       	ldi	r24, 0x9C	; 156
 12e:	9c e0       	ldi	r25, 0x0C	; 12
 130:	f9 01       	movw	r30, r18
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	80 83       	st	Z, r24
 136:	08 c0       	rjmp	.+16     	; 0x148 <mapeo_servo+0x40>
	}
	else if (ADC_servo1 > 560)
 138:	61 33       	cpi	r22, 0x31	; 49
 13a:	72 40       	sbci	r23, 0x02	; 2
 13c:	28 f0       	brcs	.+10     	; 0x148 <mapeo_servo+0x40>
	{
		(*PWM_1) = (380 * 4000UL) / 1023 + 1000;
 13e:	85 eb       	ldi	r24, 0xB5	; 181
 140:	99 e0       	ldi	r25, 0x09	; 9
 142:	f9 01       	movw	r30, r18
 144:	91 83       	std	Z+1, r25	; 0x01
 146:	80 83       	st	Z, r24
	}
	if ((ADC_servo2 > 450) & (ADC_servo2 < 560))
 148:	ca 01       	movw	r24, r20
 14a:	83 5c       	subi	r24, 0xC3	; 195
 14c:	91 40       	sbci	r25, 0x01	; 1
 14e:	8d 36       	cpi	r24, 0x6D	; 109
 150:	91 05       	cpc	r25, r1
 152:	30 f4       	brcc	.+12     	; 0x160 <mapeo_servo+0x58>
	{
		(*PWM_2) = (580 * 4000UL) / 1023 + 1000;
 154:	83 ec       	ldi	r24, 0xC3	; 195
 156:	9c e0       	ldi	r25, 0x0C	; 12
 158:	f8 01       	movw	r30, r16
 15a:	91 83       	std	Z+1, r25	; 0x01
 15c:	80 83       	st	Z, r24
 15e:	12 c0       	rjmp	.+36     	; 0x184 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 < 450)
 160:	42 3c       	cpi	r20, 0xC2	; 194
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	5f 07       	cpc	r21, r31
 166:	30 f4       	brcc	.+12     	; 0x174 <mapeo_servo+0x6c>
	{
		(*PWM_2) = (450 * 4000UL) / 1023 + 1000;	
 168:	87 ec       	ldi	r24, 0xC7	; 199
 16a:	9a e0       	ldi	r25, 0x0A	; 10
 16c:	f8 01       	movw	r30, r16
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
 172:	08 c0       	rjmp	.+16     	; 0x184 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 > 560)
 174:	41 33       	cpi	r20, 0x31	; 49
 176:	52 40       	sbci	r21, 0x02	; 2
 178:	28 f0       	brcs	.+10     	; 0x184 <mapeo_servo+0x7c>
	{
		(*PWM_2) = (700 * 4000UL) / 1023 + 1000;
 17a:	89 e9       	ldi	r24, 0x99	; 153
 17c:	9e e0       	ldi	r25, 0x0E	; 14
 17e:	f8 01       	movw	r30, r16
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	80 83       	st	Z, r24
	}
	
}
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <main>:
uint8_t PWM_4 = 0;

// MAIN LOOP
int main(void)
{
	setup();
 18a:	0e 94 62 00 	call	0xc4	; 0xc4 <setup>
	while (1)
	{	
		ADC_servo1 = ADC_read(6);
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 6f 00 	call	0xde	; 0xde <ADC_read>
 194:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ADC_servo1+0x1>
 198:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADC_servo1>
		ADC_servo2 = ADC_read(7);
 19c:	87 e0       	ldi	r24, 0x07	; 7
 19e:	0e 94 6f 00 	call	0xde	; 0xde <ADC_read>
 1a2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ADC_servo2+0x1>
 1a6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADC_servo2>
		
		mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 1aa:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <ADC_servo1>
 1ae:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <ADC_servo1+0x1>
 1b2:	02 e0       	ldi	r16, 0x02	; 2
 1b4:	11 e0       	ldi	r17, 0x01	; 1
 1b6:	24 e0       	ldi	r18, 0x04	; 4
 1b8:	31 e0       	ldi	r19, 0x01	; 1
 1ba:	ac 01       	movw	r20, r24
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 84 00 	call	0x108	; 0x108 <mapeo_servo>
		mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 1c2:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <ADC_servo2>
 1c6:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <ADC_servo2+0x1>
 1ca:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <ADC_servo1>
 1ce:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <ADC_servo1+0x1>
 1d2:	24 e0       	ldi	r18, 0x04	; 4
 1d4:	31 e0       	ldi	r19, 0x01	; 1
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 84 00 	call	0x108	; 0x108 <mapeo_servo>
		
		OCR1A = PWM_1;
 1dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PWM_1>
 1e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PWM_1+0x1>
 1e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = PWM_2;
 1ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PWM_2>
 1f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PWM_2+0x1>
 1f4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1f8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		ADC_servo3 = ADC_read(4);
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	0e 94 6f 00 	call	0xde	; 0xde <ADC_read>
 202:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ADC_servo3+0x1>
 206:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ADC_servo3>
		PWM_3 = ((ADC_servo3 * 200UL / 1023) + 25);
 20a:	9c 01       	movw	r18, r24
 20c:	a8 ec       	ldi	r26, 0xC8	; 200
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 214:	0f 2e       	mov	r0, r31
 216:	cc 24       	eor	r12, r12
 218:	ca 94       	dec	r12
 21a:	f3 e0       	ldi	r31, 0x03	; 3
 21c:	df 2e       	mov	r13, r31
 21e:	e1 2c       	mov	r14, r1
 220:	f1 2c       	mov	r15, r1
 222:	f0 2d       	mov	r31, r0
 224:	a7 01       	movw	r20, r14
 226:	96 01       	movw	r18, r12
 228:	0e 94 46 01 	call	0x28c	; 0x28c <__udivmodsi4>
 22c:	27 5e       	subi	r18, 0xE7	; 231
 22e:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <PWM_3>
		
		OCR2A = PWM_3; // Setear duty cycle
 232:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
		
		ADC_servo4 = ADC_read(5);
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	0e 94 6f 00 	call	0xde	; 0xde <ADC_read>
 23c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ADC_servo4+0x1>
 240:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADC_servo4>
		PWM_4 = ((ADC_servo4 * 200UL / 1023) + 25);
 244:	9c 01       	movw	r18, r24
 246:	a8 ec       	ldi	r26, 0xC8	; 200
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__umulhisi3>
 24e:	a7 01       	movw	r20, r14
 250:	96 01       	movw	r18, r12
 252:	0e 94 46 01 	call	0x28c	; 0x28c <__udivmodsi4>
 256:	27 5e       	subi	r18, 0xE7	; 231
 258:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		OCR2B = PWM_4; // Setear duty cycle
 25c:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	89 ef       	ldi	r24, 0xF9	; 249
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0xdc>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <main+0xe6>
 270:	00 00       	nop
 272:	8d cf       	rjmp	.-230    	; 0x18e <main+0x4>

00000274 <__vector_16>:
	
}

// Interrupt routines
ISR(TIMER0_OVF_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
	cli();
 27e:	f8 94       	cli
	
	sei();
 280:	78 94       	sei
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <__udivmodsi4>:
 28c:	a1 e2       	ldi	r26, 0x21	; 33
 28e:	1a 2e       	mov	r1, r26
 290:	aa 1b       	sub	r26, r26
 292:	bb 1b       	sub	r27, r27
 294:	fd 01       	movw	r30, r26
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <__udivmodsi4_ep>

00000298 <__udivmodsi4_loop>:
 298:	aa 1f       	adc	r26, r26
 29a:	bb 1f       	adc	r27, r27
 29c:	ee 1f       	adc	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	a2 17       	cp	r26, r18
 2a2:	b3 07       	cpc	r27, r19
 2a4:	e4 07       	cpc	r30, r20
 2a6:	f5 07       	cpc	r31, r21
 2a8:	20 f0       	brcs	.+8      	; 0x2b2 <__udivmodsi4_ep>
 2aa:	a2 1b       	sub	r26, r18
 2ac:	b3 0b       	sbc	r27, r19
 2ae:	e4 0b       	sbc	r30, r20
 2b0:	f5 0b       	sbc	r31, r21

000002b2 <__udivmodsi4_ep>:
 2b2:	66 1f       	adc	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	88 1f       	adc	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	1a 94       	dec	r1
 2bc:	69 f7       	brne	.-38     	; 0x298 <__udivmodsi4_loop>
 2be:	60 95       	com	r22
 2c0:	70 95       	com	r23
 2c2:	80 95       	com	r24
 2c4:	90 95       	com	r25
 2c6:	9b 01       	movw	r18, r22
 2c8:	ac 01       	movw	r20, r24
 2ca:	bd 01       	movw	r22, r26
 2cc:	cf 01       	movw	r24, r30
 2ce:	08 95       	ret

000002d0 <__umulhisi3>:
 2d0:	a2 9f       	mul	r26, r18
 2d2:	b0 01       	movw	r22, r0
 2d4:	b3 9f       	mul	r27, r19
 2d6:	c0 01       	movw	r24, r0
 2d8:	a3 9f       	mul	r26, r19
 2da:	70 0d       	add	r23, r0
 2dc:	81 1d       	adc	r24, r1
 2de:	11 24       	eor	r1, r1
 2e0:	91 1d       	adc	r25, r1
 2e2:	b2 9f       	mul	r27, r18
 2e4:	70 0d       	add	r23, r0
 2e6:	81 1d       	adc	r24, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	91 1d       	adc	r25, r1
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
