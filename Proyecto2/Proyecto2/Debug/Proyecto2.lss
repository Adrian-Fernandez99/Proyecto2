
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000809  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000324  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000021  00000000  00000000  000019f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  88:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_init>:
	sei();
}

void PWM_init()
{
	DDRB |= (1 << PINB1) | (1 << PINB2);  // D9 y D10 como salida
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Modo Fast PWM 14, TOP = ICR1 y prescaler = 8
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 20000;  // Setear Top como 20ms
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ae:	08 95       	ret

000000b0 <ADC_init>:
}

void ADC_init()
{
	ADMUX = (1 << REFS0);  // 5V de referencia
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  bc:	08 95       	ret

000000be <setup>:

// NON-Interrupt subroutines
// Funciones de Seteo
void setup()
{
	cli();
  be:	f8 94       	cli
	PWM_init();
  c0:	0e 94 48 00 	call	0x90	; 0x90 <PWM_init>
	ADC_init();
  c4:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_init>
	sei();
  c8:	78 94       	sei
  ca:	08 95       	ret

000000cc <ADC_read>:
}


uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
  cc:	ec e7       	ldi	r30, 0x7C	; 124
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	90 81       	ld	r25, Z
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	89 2b       	or	r24, r25
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
  e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e8:	86 fd       	sbrc	r24, 6
  ea:	fc cf       	rjmp	.-8      	; 0xe4 <ADC_read+0x18>
	return ADCH;                              // Devuelve valor (10 bits)
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <main>:
uint16_t PWM_2 = 0;

// MAIN LOOP
int main(void)
{
	setup();
  f4:	0e 94 5f 00 	call	0xbe	; 0xbe <setup>
	while (1)
	{	
		ADC_servo1 = ADC_read(6);
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_read>
  fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ADC_servo1+0x1>
 102:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADC_servo1>
		ADC_servo2 = ADC_read(7);
 106:	87 e0       	ldi	r24, 0x07	; 7
 108:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_read>
 10c:	8c 01       	movw	r16, r24
 10e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADC_servo2+0x1>
 112:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADC_servo2>
		
		PWM_1 = (ADC_servo1 * 40000) / 1023 + 1000;
 116:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ADC_servo1>
 11a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <ADC_servo1+0x1>
 11e:	a0 e4       	ldi	r26, 0x40	; 64
 120:	bc e9       	ldi	r27, 0x9C	; 156
 122:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__umulhisi3>
 126:	0f 2e       	mov	r0, r31
 128:	cc 24       	eor	r12, r12
 12a:	ca 94       	dec	r12
 12c:	f3 e0       	ldi	r31, 0x03	; 3
 12e:	df 2e       	mov	r13, r31
 130:	e1 2c       	mov	r14, r1
 132:	f1 2c       	mov	r15, r1
 134:	f0 2d       	mov	r31, r0
 136:	a7 01       	movw	r20, r14
 138:	96 01       	movw	r18, r12
 13a:	0e 94 cb 00 	call	0x196	; 0x196 <__divmodsi4>
 13e:	e9 01       	movw	r28, r18
 140:	c8 51       	subi	r28, 0x18	; 24
 142:	dc 4f       	sbci	r29, 0xFC	; 252
 144:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <PWM_1+0x1>
 148:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <PWM_1>
		PWM_2 = (ADC_servo2 * 40000) / 1023 + 1000;
 14c:	98 01       	movw	r18, r16
 14e:	a0 e4       	ldi	r26, 0x40	; 64
 150:	bc e9       	ldi	r27, 0x9C	; 156
 152:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__umulhisi3>
 156:	a7 01       	movw	r20, r14
 158:	96 01       	movw	r18, r12
 15a:	0e 94 cb 00 	call	0x196	; 0x196 <__divmodsi4>
 15e:	28 51       	subi	r18, 0x18	; 24
 160:	3c 4f       	sbci	r19, 0xFC	; 252
 162:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		OCR1A = PWM_1;
 16a:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 16e:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = PWM_2;
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 176:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 17e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	89 ef       	ldi	r24, 0xF9	; 249
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x94>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x9e>
 192:	00 00       	nop
 194:	b1 cf       	rjmp	.-158    	; 0xf8 <main+0x4>

00000196 <__divmodsi4>:
 196:	05 2e       	mov	r0, r21
 198:	97 fb       	bst	r25, 7
 19a:	1e f4       	brtc	.+6      	; 0x1a2 <__divmodsi4+0xc>
 19c:	00 94       	com	r0
 19e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__negsi2>
 1a2:	57 fd       	sbrc	r21, 7
 1a4:	07 d0       	rcall	.+14     	; 0x1b4 <__divmodsi4_neg2>
 1a6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <__udivmodsi4>
 1aa:	07 fc       	sbrc	r0, 7
 1ac:	03 d0       	rcall	.+6      	; 0x1b4 <__divmodsi4_neg2>
 1ae:	4e f4       	brtc	.+18     	; 0x1c2 <__divmodsi4_exit>
 1b0:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__negsi2>

000001b4 <__divmodsi4_neg2>:
 1b4:	50 95       	com	r21
 1b6:	40 95       	com	r20
 1b8:	30 95       	com	r19
 1ba:	21 95       	neg	r18
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	4f 4f       	sbci	r20, 0xFF	; 255
 1c0:	5f 4f       	sbci	r21, 0xFF	; 255

000001c2 <__divmodsi4_exit>:
 1c2:	08 95       	ret

000001c4 <__negsi2>:
 1c4:	90 95       	com	r25
 1c6:	80 95       	com	r24
 1c8:	70 95       	com	r23
 1ca:	61 95       	neg	r22
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	8f 4f       	sbci	r24, 0xFF	; 255
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	08 95       	ret

000001d4 <__umulhisi3>:
 1d4:	a2 9f       	mul	r26, r18
 1d6:	b0 01       	movw	r22, r0
 1d8:	b3 9f       	mul	r27, r19
 1da:	c0 01       	movw	r24, r0
 1dc:	a3 9f       	mul	r26, r19
 1de:	70 0d       	add	r23, r0
 1e0:	81 1d       	adc	r24, r1
 1e2:	11 24       	eor	r1, r1
 1e4:	91 1d       	adc	r25, r1
 1e6:	b2 9f       	mul	r27, r18
 1e8:	70 0d       	add	r23, r0
 1ea:	81 1d       	adc	r24, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	91 1d       	adc	r25, r1
 1f0:	08 95       	ret

000001f2 <__udivmodsi4>:
 1f2:	a1 e2       	ldi	r26, 0x21	; 33
 1f4:	1a 2e       	mov	r1, r26
 1f6:	aa 1b       	sub	r26, r26
 1f8:	bb 1b       	sub	r27, r27
 1fa:	fd 01       	movw	r30, r26
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <__udivmodsi4_ep>

000001fe <__udivmodsi4_loop>:
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	ee 1f       	adc	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	a2 17       	cp	r26, r18
 208:	b3 07       	cpc	r27, r19
 20a:	e4 07       	cpc	r30, r20
 20c:	f5 07       	cpc	r31, r21
 20e:	20 f0       	brcs	.+8      	; 0x218 <__udivmodsi4_ep>
 210:	a2 1b       	sub	r26, r18
 212:	b3 0b       	sbc	r27, r19
 214:	e4 0b       	sbc	r30, r20
 216:	f5 0b       	sbc	r31, r21

00000218 <__udivmodsi4_ep>:
 218:	66 1f       	adc	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	88 1f       	adc	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	1a 94       	dec	r1
 222:	69 f7       	brne	.-38     	; 0x1fe <__udivmodsi4_loop>
 224:	60 95       	com	r22
 226:	70 95       	com	r23
 228:	80 95       	com	r24
 22a:	90 95       	com	r25
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	bd 01       	movw	r22, r26
 232:	cf 01       	movw	r24, r30
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
