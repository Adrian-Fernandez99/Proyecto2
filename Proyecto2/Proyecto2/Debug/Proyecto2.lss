
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000614  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  00000688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d68  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d0  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000668  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a8  00000000  00000000  0000293e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 31       	cpi	r26, 0x11	; 17
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  88:	0c 94 08 03 	jmp	0x610	; 0x610 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_init>:
	ADMUX = (1 << REFS0);  // 5V de referencia
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
}

void TMR0_init()
{
  90:	82 ea       	ldi	r24, 0xA2	; 162
  92:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  96:	8a e1       	ldi	r24, 0x1A	; 26
  98:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	9e e4       	ldi	r25, 0x4E	; 78
  a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  a8:	83 ea       	ldi	r24, 0xA3	; 163
  aa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  b4:	08 95       	ret

000000b6 <ADC_init>:
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  bc:	86 e8       	ldi	r24, 0x86	; 134
  be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c2:	08 95       	ret

000000c4 <setup>:
  c4:	f8 94       	cli
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	84 63       	ori	r24, 0x34	; 52
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	87 b9       	out	0x07, r24	; 7
  da:	ed e6       	ldi	r30, 0x6D	; 109
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	84 63       	ori	r24, 0x34	; 52
  e2:	80 83       	st	Z, r24
  e4:	e8 e6       	ldi	r30, 0x68	; 104
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	80 83       	st	Z, r24
  ee:	0e 94 48 00 	call	0x90	; 0x90 <PWM_init>
  f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <ADC_init>
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <ADC_read>:
	
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
  fa:	ec e7       	ldi	r30, 0x7C	; 124
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	89 2b       	or	r24, r25
 106:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
 112:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 116:	86 fd       	sbrc	r24, 6
 118:	fc cf       	rjmp	.-8      	; 0x112 <ADC_read+0x18>
	return ADC;                              // Devuelve valor (10 bits)
 11a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 11e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 122:	08 95       	ret

00000124 <mapeo_servo>:

void mapeo_servo(uint8_t PWM_select, uint16_t ADC_servo1, uint16_t ADC_servo2, uint16_t* PWM_1, uint16_t* PWM_2)
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
	if ((ADC_servo1 > 450) & (ADC_servo1 < 560))
 128:	cb 01       	movw	r24, r22
 12a:	83 5c       	subi	r24, 0xC3	; 195
 12c:	91 40       	sbci	r25, 0x01	; 1
 12e:	8d 36       	cpi	r24, 0x6D	; 109
 130:	91 05       	cpc	r25, r1
 132:	30 f4       	brcc	.+12     	; 0x140 <mapeo_servo+0x1c>
	{
		(*PWM_1) = (490 * 4000UL) / 1023 + 1000;
 134:	83 e6       	ldi	r24, 0x63	; 99
 136:	9b e0       	ldi	r25, 0x0B	; 11
 138:	f9 01       	movw	r30, r18
 13a:	91 83       	std	Z+1, r25	; 0x01
 13c:	80 83       	st	Z, r24
 13e:	12 c0       	rjmp	.+36     	; 0x164 <mapeo_servo+0x40>
	}
	else if (ADC_servo1 < 450)
 140:	62 3c       	cpi	r22, 0xC2	; 194
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	7f 07       	cpc	r23, r31
 146:	30 f4       	brcc	.+12     	; 0x154 <mapeo_servo+0x30>
	{
		(*PWM_1) = (570 * 4000UL) / 1023 + 1000;
 148:	8c e9       	ldi	r24, 0x9C	; 156
 14a:	9c e0       	ldi	r25, 0x0C	; 12
 14c:	f9 01       	movw	r30, r18
 14e:	91 83       	std	Z+1, r25	; 0x01
 150:	80 83       	st	Z, r24
 152:	08 c0       	rjmp	.+16     	; 0x164 <mapeo_servo+0x40>
	}
	else if (ADC_servo1 > 560)
 154:	61 33       	cpi	r22, 0x31	; 49
 156:	72 40       	sbci	r23, 0x02	; 2
 158:	28 f0       	brcs	.+10     	; 0x164 <mapeo_servo+0x40>
	{
		(*PWM_1) = (380 * 4000UL) / 1023 + 1000;
 15a:	85 eb       	ldi	r24, 0xB5	; 181
 15c:	99 e0       	ldi	r25, 0x09	; 9
 15e:	f9 01       	movw	r30, r18
 160:	91 83       	std	Z+1, r25	; 0x01
 162:	80 83       	st	Z, r24
	}
	if ((ADC_servo2 > 450) & (ADC_servo2 < 560))
 164:	ca 01       	movw	r24, r20
 166:	83 5c       	subi	r24, 0xC3	; 195
 168:	91 40       	sbci	r25, 0x01	; 1
 16a:	8d 36       	cpi	r24, 0x6D	; 109
 16c:	91 05       	cpc	r25, r1
 16e:	30 f4       	brcc	.+12     	; 0x17c <mapeo_servo+0x58>
	{
		(*PWM_2) = (580 * 4000UL) / 1023 + 1000;
 170:	83 ec       	ldi	r24, 0xC3	; 195
 172:	9c e0       	ldi	r25, 0x0C	; 12
 174:	f8 01       	movw	r30, r16
 176:	91 83       	std	Z+1, r25	; 0x01
 178:	80 83       	st	Z, r24
 17a:	12 c0       	rjmp	.+36     	; 0x1a0 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 < 450)
 17c:	42 3c       	cpi	r20, 0xC2	; 194
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	5f 07       	cpc	r21, r31
 182:	30 f4       	brcc	.+12     	; 0x190 <mapeo_servo+0x6c>
	{
		(*PWM_2) = (450 * 4000UL) / 1023 + 1000;	
 184:	87 ec       	ldi	r24, 0xC7	; 199
 186:	9a e0       	ldi	r25, 0x0A	; 10
 188:	f8 01       	movw	r30, r16
 18a:	91 83       	std	Z+1, r25	; 0x01
 18c:	80 83       	st	Z, r24
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 > 560)
 190:	41 33       	cpi	r20, 0x31	; 49
 192:	52 40       	sbci	r21, 0x02	; 2
 194:	28 f0       	brcs	.+10     	; 0x1a0 <mapeo_servo+0x7c>
	{
		(*PWM_2) = (700 * 4000UL) / 1023 + 1000;
 196:	89 e9       	ldi	r24, 0x99	; 153
 198:	9e e0       	ldi	r25, 0x0E	; 14
 19a:	f8 01       	movw	r30, r16
 19c:	91 83       	std	Z+1, r25	; 0x01
 19e:	80 83       	st	Z, r24
	}
	
}
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <map_servo2>:

uint16_t map_servo2(uint16_t ADC_need)
{
	uint16_t valor = ((ADC_need * 200UL / 1023) + 25);
 1a6:	9c 01       	movw	r18, r24
 1a8:	a8 ec       	ldi	r26, 0xC8	; 200
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__umulhisi3>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	33 e0       	ldi	r19, 0x03	; 3
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__udivmodsi4>
	return valor;
}
 1bc:	c9 01       	movw	r24, r18
 1be:	49 96       	adiw	r24, 0x19	; 25
 1c0:	08 95       	ret

000001c2 <writeEEPROM>:

void writeEEPROM(uint16_t direccion, uint8_t dato) 
{
	while (EECR & (1 << EEPE));
 1c2:	f9 99       	sbic	0x1f, 1	; 31
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <writeEEPROM>
	EEAR = direccion;
 1c6:	92 bd       	out	0x22, r25	; 34
 1c8:	81 bd       	out	0x21, r24	; 33
	EEDR = dato;
 1ca:	60 bd       	out	0x20, r22	; 32
	EECR |= (1 << EEMPE);
 1cc:	8f b3       	in	r24, 0x1f	; 31
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);
 1d2:	8f b3       	in	r24, 0x1f	; 31
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	8f bb       	out	0x1f, r24	; 31
 1d8:	08 95       	ret

000001da <read_EEPROM>:
}

uint8_t read_EEPROM(uint16_t direccion)
{
	while (EECR & (1 << EEPE));
 1da:	f9 99       	sbic	0x1f, 1	; 31
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <read_EEPROM>
	EEAR = direccion;
 1de:	92 bd       	out	0x22, r25	; 34
 1e0:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);
 1e2:	8f b3       	in	r24, 0x1f	; 31
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
 1e8:	80 b5       	in	r24, 0x20	; 32
}
 1ea:	08 95       	ret

000001ec <save_>:

void save_(uint8_t servo, uint8_t posicion, uint16_t dato)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	d4 2f       	mov	r29, r20
	uint8_t temporal = (posicion * 8) + (servo * 2);
 1f2:	26 2f       	mov	r18, r22
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	28 0f       	add	r18, r24
 200:	31 1d       	adc	r19, r1
 202:	c2 2f       	mov	r28, r18
 204:	cc 0f       	add	r28, r28
	writeEEPROM(temporal, (dato >> 8));
 206:	65 2f       	mov	r22, r21
 208:	8c 2f       	mov	r24, r28
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <writeEEPROM>
	temporal++;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	8c 0f       	add	r24, r28
	writeEEPROM(temporal, (dato & 0xFF));
 214:	6d 2f       	mov	r22, r29
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <writeEEPROM>
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <load_>:

uint8_t load_(uint8_t servo, uint8_t posicion, uint8_t punch)
{
	uint8_t temporal = (posicion * 8) + (servo * 2) + punch;
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	68 0f       	add	r22, r24
 22e:	71 1d       	adc	r23, r1
 230:	66 0f       	add	r22, r22
 232:	86 2f       	mov	r24, r22
 234:	84 0f       	add	r24, r20
	return read_EEPROM(temporal);
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 ed 00 	call	0x1da	; 0x1da <read_EEPROM>
}
 23c:	08 95       	ret

0000023e <led_on>:

void led_on(uint8_t modo, uint8_t place)
{
	if (modo == 1)
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	39 f4       	brne	.+14     	; 0x250 <led_on+0x12>
	{
		PORTB |= (1 << PORTB5);
 242:	85 b1       	in	r24, 0x05	; 5
 244:	80 62       	ori	r24, 0x20	; 32
 246:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB4);
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	8f 7e       	andi	r24, 0xEF	; 239
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	0f c0       	rjmp	.+30     	; 0x26e <led_on+0x30>
	}
	else if (modo == 2)
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	39 f4       	brne	.+14     	; 0x262 <led_on+0x24>
	{
		PORTB |= (1 << PORTB4);
 254:	85 b1       	in	r24, 0x05	; 5
 256:	80 61       	ori	r24, 0x10	; 16
 258:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB5);
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	8f 7d       	andi	r24, 0xDF	; 223
 25e:	85 b9       	out	0x05, r24	; 5
 260:	06 c0       	rjmp	.+12     	; 0x26e <led_on+0x30>
	}
	else
	{
		PORTB &= ~(1 << PORTB5);
 262:	85 b1       	in	r24, 0x05	; 5
 264:	8f 7d       	andi	r24, 0xDF	; 223
 266:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB4);
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	8f 7e       	andi	r24, 0xEF	; 239
 26c:	85 b9       	out	0x05, r24	; 5
	}
	
	// Leds para posición
	if (place == 1)
 26e:	61 30       	cpi	r22, 0x01	; 1
 270:	69 f4       	brne	.+26     	; 0x28c <led_on+0x4e>
	{
		PORTC |= (1 << PORTC1);
 272:	88 b1       	in	r24, 0x08	; 8
 274:	82 60       	ori	r24, 0x02	; 2
 276:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 278:	88 b1       	in	r24, 0x08	; 8
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	8b 7f       	andi	r24, 0xFB	; 251
 282:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 284:	88 b1       	in	r24, 0x08	; 8
 286:	87 7f       	andi	r24, 0xF7	; 247
 288:	88 b9       	out	0x08, r24	; 8
 28a:	08 95       	ret
	}
	else if (place == 2)
 28c:	62 30       	cpi	r22, 0x02	; 2
 28e:	69 f4       	brne	.+26     	; 0x2aa <led_on+0x6c>
	{
		PORTC |= (1 << PORTC2);
 290:	88 b1       	in	r24, 0x08	; 8
 292:	84 60       	ori	r24, 0x04	; 4
 294:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 296:	88 b1       	in	r24, 0x08	; 8
 298:	8e 7f       	andi	r24, 0xFE	; 254
 29a:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 29c:	88 b1       	in	r24, 0x08	; 8
 29e:	8d 7f       	andi	r24, 0xFD	; 253
 2a0:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 2a2:	88 b1       	in	r24, 0x08	; 8
 2a4:	87 7f       	andi	r24, 0xF7	; 247
 2a6:	88 b9       	out	0x08, r24	; 8
 2a8:	08 95       	ret
	}
	else if (place == 3)
 2aa:	63 30       	cpi	r22, 0x03	; 3
 2ac:	69 f4       	brne	.+26     	; 0x2c8 <led_on+0x8a>
	{
		PORTC |= (1 << PORTC3);
 2ae:	88 b1       	in	r24, 0x08	; 8
 2b0:	88 60       	ori	r24, 0x08	; 8
 2b2:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 2b4:	88 b1       	in	r24, 0x08	; 8
 2b6:	8e 7f       	andi	r24, 0xFE	; 254
 2b8:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 2ba:	88 b1       	in	r24, 0x08	; 8
 2bc:	8b 7f       	andi	r24, 0xFB	; 251
 2be:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 2c0:	88 b1       	in	r24, 0x08	; 8
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	88 b9       	out	0x08, r24	; 8
 2c6:	08 95       	ret
	}
	else
	{
		PORTC |= (1 << PORTC0);
 2c8:	88 b1       	in	r24, 0x08	; 8
 2ca:	81 60       	ori	r24, 0x01	; 1
 2cc:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 2ce:	88 b1       	in	r24, 0x08	; 8
 2d0:	8d 7f       	andi	r24, 0xFD	; 253
 2d2:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 2d4:	88 b1       	in	r24, 0x08	; 8
 2d6:	8b 7f       	andi	r24, 0xFB	; 251
 2d8:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 2da:	88 b1       	in	r24, 0x08	; 8
 2dc:	87 7f       	andi	r24, 0xF7	; 247
 2de:	88 b9       	out	0x08, r24	; 8
 2e0:	08 95       	ret

000002e2 <main>:
uint8_t habilitar = 0;

// MAIN LOOP
int main(void)
{
	setup();
 2e2:	0e 94 62 00 	call	0xc4	; 0xc4 <setup>
	while (1)
	{	
		led_on(modo, place);
 2e6:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 2ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <modo>
 2ee:	0e 94 1f 01 	call	0x23e	; 0x23e <led_on>
		if (modo == 0)
 2f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <modo>
 2f6:	81 11       	cpse	r24, r1
 2f8:	84 c0       	rjmp	.+264    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{
			ADC_servo1 = ADC_read(6);
 2fa:	86 e0       	ldi	r24, 0x06	; 6
 2fc:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_read>
 300:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <ADC_servo1+0x1>
 304:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <ADC_servo1>
			ADC_servo2 = ADC_read(7);
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_read>
 30e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <ADC_servo2+0x1>
 312:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <ADC_servo2>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 316:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <ADC_servo1>
 31a:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <ADC_servo1+0x1>
 31e:	05 e0       	ldi	r16, 0x05	; 5
 320:	11 e0       	ldi	r17, 0x01	; 1
 322:	27 e0       	ldi	r18, 0x07	; 7
 324:	31 e0       	ldi	r19, 0x01	; 1
 326:	ac 01       	movw	r20, r24
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 92 00 	call	0x124	; 0x124 <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 32e:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <ADC_servo2>
 332:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <ADC_servo2+0x1>
 336:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <ADC_servo1>
 33a:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <ADC_servo1+0x1>
 33e:	27 e0       	ldi	r18, 0x07	; 7
 340:	31 e0       	ldi	r19, 0x01	; 1
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 92 00 	call	0x124	; 0x124 <mapeo_servo>
			
			OCR1A = PWM_1;
 348:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <PWM_1>
 34c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <PWM_1+0x1>
 350:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 354:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 358:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <PWM_2>
 35c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <PWM_2+0x1>
 360:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 364:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			ADC_servo3 = ADC_read(4);
 368:	84 e0       	ldi	r24, 0x04	; 4
 36a:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_read>
 36e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_servo3+0x1>
 372:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_servo3>
			PWM_3 = map_servo2(ADC_servo3);
 376:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <map_servo2>
 37a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_3>
			
			OCR2A = PWM_3; // Setear duty cycle
 37e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			ADC_servo4 = ADC_read(5);
 382:	85 e0       	ldi	r24, 0x05	; 5
 384:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_read>
 388:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_servo4+0x1>
 38c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_servo4>
			PWM_4 = map_servo2(ADC_servo4);
 390:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <map_servo2>
 394:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PWM_4>
			
			OCR2B = PWM_4; // Setear duty cycle
 398:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			
			if (habilitar == 1)
 39c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	29 f5       	brne	.+74     	; 0x3ee <main+0x10c>
			{
				save_(1, place, ADC_servo1);
 3a4:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <ADC_servo1>
 3a8:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <ADC_servo1+0x1>
 3ac:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 3b0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <save_>
				save_(2, place, ADC_servo2);
 3b4:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <ADC_servo2>
 3b8:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <ADC_servo2+0x1>
 3bc:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <save_>
				save_(3, place, ADC_servo3);
 3c6:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <ADC_servo3>
 3ca:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <ADC_servo3+0x1>
 3ce:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 3d2:	83 e0       	ldi	r24, 0x03	; 3
 3d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <save_>
				save_(4, place, ADC_servo4);
 3d8:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <ADC_servo4>
 3dc:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <ADC_servo4+0x1>
 3e0:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <save_>
				habilitar = 0;
 3ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	39 ef       	ldi	r19, 0xF9	; 249
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	30 40       	sbci	r19, 0x00	; 0
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x112>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x11c>
 3fe:	00 00       	nop
 400:	72 cf       	rjmp	.-284    	; 0x2e6 <main+0x4>
			}

			_delay_ms(20);  // Tiempo entre actualizaciones
		}
		
		else if (modo == 1)
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	6f cf       	rjmp	.-290    	; 0x2e6 <main+0x4>
		{
			ADC_servo1 = ((load_(1, place, 0)) << 8) | (load_(1, place, 1));
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 40e:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 412:	c8 2f       	mov	r28, r24
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	dc 2f       	mov	r29, r28
 418:	cc 27       	eor	r28, r28
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 426:	c8 2b       	or	r28, r24
 428:	d0 93 10 01 	sts	0x0110, r29	; 0x800110 <ADC_servo1+0x1>
 42c:	c0 93 0f 01 	sts	0x010F, r28	; 0x80010f <ADC_servo1>
			ADC_servo2 = ((load_(2, place, 0)) << 8) | (load_(2, place, 1));
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 43c:	48 2f       	mov	r20, r24
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	d4 2f       	mov	r29, r20
 442:	cc 27       	eor	r28, r28
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 450:	ae 01       	movw	r20, r28
 452:	48 2b       	or	r20, r24
 454:	50 93 0e 01 	sts	0x010E, r21	; 0x80010e <ADC_servo2+0x1>
 458:	40 93 0d 01 	sts	0x010D, r20	; 0x80010d <ADC_servo2>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 45c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <ADC_servo1>
 460:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <ADC_servo1+0x1>
 464:	05 e0       	ldi	r16, 0x05	; 5
 466:	11 e0       	ldi	r17, 0x01	; 1
 468:	27 e0       	ldi	r18, 0x07	; 7
 46a:	31 e0       	ldi	r19, 0x01	; 1
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 92 00 	call	0x124	; 0x124 <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 472:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <ADC_servo2>
 476:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <ADC_servo2+0x1>
 47a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <ADC_servo1>
 47e:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <ADC_servo1+0x1>
 482:	27 e0       	ldi	r18, 0x07	; 7
 484:	31 e0       	ldi	r19, 0x01	; 1
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0e 94 92 00 	call	0x124	; 0x124 <mapeo_servo>
			OCR1A = PWM_1;
 48c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <PWM_1>
 490:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <PWM_1+0x1>
 494:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 498:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 49c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <PWM_2>
 4a0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <PWM_2+0x1>
 4a4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 4a8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			ADC_servo3 = ((load_(3, place, 0)) << 8) | (load_(3, place, 1));
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	d8 2f       	mov	r29, r24
 4bc:	cc 27       	eor	r28, r28
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 4ca:	9e 01       	movw	r18, r28
 4cc:	28 2b       	or	r18, r24
 4ce:	c9 01       	movw	r24, r18
 4d0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_servo3+0x1>
 4d4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_servo3>
			PWM_3 = map_servo2(ADC_servo3);
 4d8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <map_servo2>
 4dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PWM_3>
			OCR2A = PWM_3; // Setear duty cycle
 4e0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			ADC_servo4 = ((load_(4, place, 0)) << 8) | (load_(4, place, 1));
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	d8 2f       	mov	r29, r24
 4f4:	cc 27       	eor	r28, r28
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <place>
 4fc:	84 e0       	ldi	r24, 0x04	; 4
 4fe:	0e 94 11 01 	call	0x222	; 0x222 <load_>
 502:	9e 01       	movw	r18, r28
 504:	28 2b       	or	r18, r24
 506:	c9 01       	movw	r24, r18
 508:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_servo4+0x1>
 50c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_servo4>
			PWM_4 = map_servo2(ADC_servo4);
 510:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <map_servo2>
 514:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <PWM_4>
			OCR2B = PWM_4; // Setear duty cycle
 518:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 51c:	3f ef       	ldi	r19, 0xFF	; 255
 51e:	89 ef       	ldi	r24, 0xF9	; 249
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	31 50       	subi	r19, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 52c:	00 00       	nop
 52e:	db ce       	rjmp	.-586    	; 0x2e6 <main+0x4>

00000530 <__vector_16>:
	}
}

// Interrupt routines
ISR(TIMER0_OVF_vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
	cli();
 53a:	f8 94       	cli
		
	sei();
 53c:	78 94       	sei
}
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <__vector_5>:

ISR(PCINT2_vect)
{
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
	cli();
 556:	f8 94       	cli
 558:	8f e1       	ldi	r24, 0x1F	; 31
 55a:	9e e4       	ldi	r25, 0x4E	; 78
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <__vector_5+0x14>
 560:	00 c0       	rjmp	.+0      	; 0x562 <__vector_5+0x1a>
 562:	00 00       	nop
	
	_delay_ms(5);
	// Si el pin está encendido en el pin 2 incrementa
	if (!(PIND & (1 << PORTD2)))
 564:	4a 99       	sbic	0x09, 2	; 9
 566:	0a c0       	rjmp	.+20     	; 0x57c <__vector_5+0x34>
	{
		modo++;
 568:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <modo>
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <modo>
		if (modo == 3)
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	a1 f4       	brne	.+40     	; 0x59e <__vector_5+0x56>
		{
			modo = 0;
 576:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <modo>
 57a:	11 c0       	rjmp	.+34     	; 0x59e <__vector_5+0x56>
		}
	}
	// Si el pin está encendido en el pin 4 incrementa
	else if (!(PIND & (1 << PORTD4)))
 57c:	4c 99       	sbic	0x09, 4	; 9
 57e:	0a c0       	rjmp	.+20     	; 0x594 <__vector_5+0x4c>
	{
		place++;
 580:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <place>
 584:	8f 5f       	subi	r24, 0xFF	; 255
 586:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <place>
		if (place == 4)
 58a:	84 30       	cpi	r24, 0x04	; 4
 58c:	41 f4       	brne	.+16     	; 0x59e <__vector_5+0x56>
		{
			place = 0;
 58e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <place>
 592:	05 c0       	rjmp	.+10     	; 0x59e <__vector_5+0x56>
		}
	}
	// Si el pin está encendido en el pin 5 decrementa
	else if (!(PIND & (1 << PORTD5)))
 594:	4d 99       	sbic	0x09, 5	; 9
 596:	03 c0       	rjmp	.+6      	; 0x59e <__vector_5+0x56>
	{
		habilitar = 1;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	sei();
 59e:	78 94       	sei
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__udivmodsi4>:
 5ae:	a1 e2       	ldi	r26, 0x21	; 33
 5b0:	1a 2e       	mov	r1, r26
 5b2:	aa 1b       	sub	r26, r26
 5b4:	bb 1b       	sub	r27, r27
 5b6:	fd 01       	movw	r30, r26
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <__udivmodsi4_ep>

000005ba <__udivmodsi4_loop>:
 5ba:	aa 1f       	adc	r26, r26
 5bc:	bb 1f       	adc	r27, r27
 5be:	ee 1f       	adc	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	a2 17       	cp	r26, r18
 5c4:	b3 07       	cpc	r27, r19
 5c6:	e4 07       	cpc	r30, r20
 5c8:	f5 07       	cpc	r31, r21
 5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__udivmodsi4_ep>
 5cc:	a2 1b       	sub	r26, r18
 5ce:	b3 0b       	sbc	r27, r19
 5d0:	e4 0b       	sbc	r30, r20
 5d2:	f5 0b       	sbc	r31, r21

000005d4 <__udivmodsi4_ep>:
 5d4:	66 1f       	adc	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	1a 94       	dec	r1
 5de:	69 f7       	brne	.-38     	; 0x5ba <__udivmodsi4_loop>
 5e0:	60 95       	com	r22
 5e2:	70 95       	com	r23
 5e4:	80 95       	com	r24
 5e6:	90 95       	com	r25
 5e8:	9b 01       	movw	r18, r22
 5ea:	ac 01       	movw	r20, r24
 5ec:	bd 01       	movw	r22, r26
 5ee:	cf 01       	movw	r24, r30
 5f0:	08 95       	ret

000005f2 <__umulhisi3>:
 5f2:	a2 9f       	mul	r26, r18
 5f4:	b0 01       	movw	r22, r0
 5f6:	b3 9f       	mul	r27, r19
 5f8:	c0 01       	movw	r24, r0
 5fa:	a3 9f       	mul	r26, r19
 5fc:	70 0d       	add	r23, r0
 5fe:	81 1d       	adc	r24, r1
 600:	11 24       	eor	r1, r1
 602:	91 1d       	adc	r25, r1
 604:	b2 9f       	mul	r27, r18
 606:	70 0d       	add	r23, r0
 608:	81 1d       	adc	r24, r1
 60a:	11 24       	eor	r1, r1
 60c:	91 1d       	adc	r25, r1
 60e:	08 95       	ret

00000610 <_exit>:
 610:	f8 94       	cli

00000612 <__stop_program>:
 612:	ff cf       	rjmp	.-2      	; 0x612 <__stop_program>
