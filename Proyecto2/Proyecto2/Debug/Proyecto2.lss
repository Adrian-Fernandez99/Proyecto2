
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000876  0000090a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080010a  0080010a  00000914  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001025  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  00001a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000080e  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000569  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fc  00000000  00000000  00003171  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000366d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <main>
  9e:	0c 94 39 04 	jmp	0x872	; 0x872 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_init>:
}

void PWM_init()
{
	// Timer 1
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  a6:	82 ea       	ldi	r24, 0xA2	; 162
  a8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Modo Fast PWM 14, TOP = ICR1 y prescaler = 8
  ac:	8a e1       	ldi	r24, 0x1A	; 26
  ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 20000;  // Setear Top como 20ms
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	9e e4       	ldi	r25, 0x4E	; 78
  b6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Timer 2
	TCCR2A = (1 << COM2A1) | (1 << COM0B1) | (1 << WGM21) | (1 << WGM20); // Configurar Fast PWM, no-inverting mode
  be:	83 ea       	ldi	r24, 0xA3	; 163
  c0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22) | (1 << CS20); // Prescaler de 
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  ca:	08 95       	ret

000000cc <ADC_init>:

}

void ADC_init()
{
	ADMUX = (1 << REFS0);  // 5V de referencia
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
  d2:	86 e8       	ldi	r24, 0x86	; 134
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d8:	08 95       	ret

000000da <UART_init>:
}

void UART_init()
{
	DDRD |= (1 << DDD1);	// Configuración de pines rx y tx
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0);
  e0:	8a b1       	in	r24, 0x0a	; 10
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = 0;				// Configuración del serial
  e6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B |= (1 << RXCIE0) | (1<< RXEN0) | (1 << TXEN0);
  ea:	e1 ec       	ldi	r30, 0xC1	; 193
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 69       	ori	r24, 0x98	; 152
  f2:	80 83       	st	Z, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	UBRR0 = 103;	// BAUD RATE a 9600
  fa:	87 e6       	ldi	r24, 0x67	; 103
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 106:	08 95       	ret

00000108 <setup>:

// NON-Interrupt subroutines
// Funciones de Seteo
void setup()
{
	cli();
 108:	f8 94       	cli
	DDRB = 0xFF;  // Puerto B como salida
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PIND3);  // PIND3 como salida
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	88 60       	ori	r24, 0x08	; 8
 112:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND2) | (1 << PIND4) | (1 << PIND5);
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	84 63       	ori	r24, 0x34	; 52
 118:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0x0F;  // Mitad de puerto C como salida
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	87 b9       	out	0x07, r24	; 7
	
	PCMSK2 |= (1 << PIND2) | (1 << PIND4) | (1 << PIND5);
 11e:	ed e6       	ldi	r30, 0x6D	; 109
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 63       	ori	r24, 0x34	; 52
 126:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE2);
 128:	e8 e6       	ldi	r30, 0x68	; 104
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	80 83       	st	Z, r24
	
	PWM_init();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_init>
	ADC_init();
 136:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_init>
	UART_init();
 13a:	0e 94 6d 00 	call	0xda	; 0xda <UART_init>
	
	sei();
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <ADC_read>:
	UBRR0 = 103;	// BAUD RATE a 9600
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	90 81       	ld	r25, Z
 148:	90 7f       	andi	r25, 0xF0	; 240
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	89 2b       	or	r24, r25
 14e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
 150:	ea e7       	ldi	r30, 0x7A	; 122
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 64       	ori	r24, 0x40	; 64
 158:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
 15a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15e:	86 fd       	sbrc	r24, 6
 160:	fc cf       	rjmp	.-8      	; 0x15a <ADC_read+0x18>
	return ADC;                              // Devuelve valor (10 bits)
 162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 16a:	08 95       	ret

0000016c <mapeo_servo>:

void mapeo_servo(uint8_t PWM_select, uint16_t ADC_servo1, uint16_t ADC_servo2, uint16_t* PWM_1, uint16_t* PWM_2)
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
	if ((ADC_servo1 > 450) & (ADC_servo1 < 560))
 170:	cb 01       	movw	r24, r22
 172:	83 5c       	subi	r24, 0xC3	; 195
 174:	91 40       	sbci	r25, 0x01	; 1
 176:	8d 36       	cpi	r24, 0x6D	; 109
 178:	91 05       	cpc	r25, r1
 17a:	30 f4       	brcc	.+12     	; 0x188 <mapeo_servo+0x1c>
	{
		(*PWM_1) = (490 * 4000UL) / 1023 + 1000;
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	9b e0       	ldi	r25, 0x0B	; 11
 180:	f9 01       	movw	r30, r18
 182:	91 83       	std	Z+1, r25	; 0x01
 184:	80 83       	st	Z, r24
 186:	12 c0       	rjmp	.+36     	; 0x1ac <mapeo_servo+0x40>
	}
	else if (ADC_servo1 < 450)
 188:	62 3c       	cpi	r22, 0xC2	; 194
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	7f 07       	cpc	r23, r31
 18e:	30 f4       	brcc	.+12     	; 0x19c <mapeo_servo+0x30>
	{
		(*PWM_1) = (570 * 4000UL) / 1023 + 1000;
 190:	8c e9       	ldi	r24, 0x9C	; 156
 192:	9c e0       	ldi	r25, 0x0C	; 12
 194:	f9 01       	movw	r30, r18
 196:	91 83       	std	Z+1, r25	; 0x01
 198:	80 83       	st	Z, r24
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <mapeo_servo+0x40>
	}
	else if (ADC_servo1 > 560)
 19c:	61 33       	cpi	r22, 0x31	; 49
 19e:	72 40       	sbci	r23, 0x02	; 2
 1a0:	28 f0       	brcs	.+10     	; 0x1ac <mapeo_servo+0x40>
	{
		(*PWM_1) = (380 * 4000UL) / 1023 + 1000;
 1a2:	85 eb       	ldi	r24, 0xB5	; 181
 1a4:	99 e0       	ldi	r25, 0x09	; 9
 1a6:	f9 01       	movw	r30, r18
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	80 83       	st	Z, r24
	}
	if ((ADC_servo2 > 450) & (ADC_servo2 < 560))
 1ac:	ca 01       	movw	r24, r20
 1ae:	83 5c       	subi	r24, 0xC3	; 195
 1b0:	91 40       	sbci	r25, 0x01	; 1
 1b2:	8d 36       	cpi	r24, 0x6D	; 109
 1b4:	91 05       	cpc	r25, r1
 1b6:	30 f4       	brcc	.+12     	; 0x1c4 <mapeo_servo+0x58>
	{
		(*PWM_2) = (580 * 4000UL) / 1023 + 1000;
 1b8:	83 ec       	ldi	r24, 0xC3	; 195
 1ba:	9c e0       	ldi	r25, 0x0C	; 12
 1bc:	f8 01       	movw	r30, r16
 1be:	91 83       	std	Z+1, r25	; 0x01
 1c0:	80 83       	st	Z, r24
 1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 < 450)
 1c4:	42 3c       	cpi	r20, 0xC2	; 194
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	5f 07       	cpc	r21, r31
 1ca:	30 f4       	brcc	.+12     	; 0x1d8 <mapeo_servo+0x6c>
	{
		(*PWM_2) = (450 * 4000UL) / 1023 + 1000;	
 1cc:	87 ec       	ldi	r24, 0xC7	; 199
 1ce:	9a e0       	ldi	r25, 0x0A	; 10
 1d0:	f8 01       	movw	r30, r16
 1d2:	91 83       	std	Z+1, r25	; 0x01
 1d4:	80 83       	st	Z, r24
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <mapeo_servo+0x7c>
	}
	else if (ADC_servo2 > 560)
 1d8:	41 33       	cpi	r20, 0x31	; 49
 1da:	52 40       	sbci	r21, 0x02	; 2
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <mapeo_servo+0x7c>
	{
		(*PWM_2) = (700 * 4000UL) / 1023 + 1000;
 1de:	89 e9       	ldi	r24, 0x99	; 153
 1e0:	9e e0       	ldi	r25, 0x0E	; 14
 1e2:	f8 01       	movw	r30, r16
 1e4:	91 83       	std	Z+1, r25	; 0x01
 1e6:	80 83       	st	Z, r24
	}
	
}
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <map_servo2>:

uint16_t map_servo2(uint16_t ADC_need)
{
	uint16_t valor = ((ADC_need * 200UL / 1023) + 25);
 1ee:	9c 01       	movw	r18, r24
 1f0:	a8 ec       	ldi	r26, 0xC8	; 200
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	0e 94 2a 04 	call	0x854	; 0x854 <__umulhisi3>
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	33 e0       	ldi	r19, 0x03	; 3
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	0e 94 08 04 	call	0x810	; 0x810 <__udivmodsi4>
	return valor;
}
 204:	c9 01       	movw	r24, r18
 206:	49 96       	adiw	r24, 0x19	; 25
 208:	08 95       	ret

0000020a <writeEEPROM>:

void writeEEPROM(uint16_t direccion, uint8_t dato) 
{
	while (EECR & (1 << EEPE));
 20a:	f9 99       	sbic	0x1f, 1	; 31
 20c:	fe cf       	rjmp	.-4      	; 0x20a <writeEEPROM>
	EEAR = direccion;
 20e:	92 bd       	out	0x22, r25	; 34
 210:	81 bd       	out	0x21, r24	; 33
	EEDR = dato;
 212:	60 bd       	out	0x20, r22	; 32
	EECR |= (1 << EEMPE);
 214:	8f b3       	in	r24, 0x1f	; 31
 216:	84 60       	ori	r24, 0x04	; 4
 218:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);
 21a:	8f b3       	in	r24, 0x1f	; 31
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8f bb       	out	0x1f, r24	; 31
 220:	08 95       	ret

00000222 <read_EEPROM>:
}

uint8_t read_EEPROM(uint16_t direccion)
{
	while (EECR & (1 << EEPE));
 222:	f9 99       	sbic	0x1f, 1	; 31
 224:	fe cf       	rjmp	.-4      	; 0x222 <read_EEPROM>
	EEAR = direccion;
 226:	92 bd       	out	0x22, r25	; 34
 228:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);
 22a:	8f b3       	in	r24, 0x1f	; 31
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
 230:	80 b5       	in	r24, 0x20	; 32
}
 232:	08 95       	ret

00000234 <save_>:

void save_(uint8_t servo, uint8_t posicion, uint16_t dato)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	d4 2f       	mov	r29, r20
	uint8_t temporal = (posicion * 8) + (servo * 2);
 23a:	26 2f       	mov	r18, r22
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	28 0f       	add	r18, r24
 248:	31 1d       	adc	r19, r1
 24a:	c2 2f       	mov	r28, r18
 24c:	cc 0f       	add	r28, r28
	writeEEPROM(temporal, (dato >> 8));
 24e:	65 2f       	mov	r22, r21
 250:	8c 2f       	mov	r24, r28
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 05 01 	call	0x20a	; 0x20a <writeEEPROM>
	temporal++;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	8c 0f       	add	r24, r28
	writeEEPROM(temporal, (dato & 0xFF));
 25c:	6d 2f       	mov	r22, r29
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 05 01 	call	0x20a	; 0x20a <writeEEPROM>
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <load_>:

uint8_t load_(uint8_t servo, uint8_t posicion, uint8_t punch)
{
	uint8_t temporal = (posicion * 8) + (servo * 2) + punch;
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	68 0f       	add	r22, r24
 276:	71 1d       	adc	r23, r1
 278:	66 0f       	add	r22, r22
 27a:	86 2f       	mov	r24, r22
 27c:	84 0f       	add	r24, r20
	return read_EEPROM(temporal);
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 11 01 	call	0x222	; 0x222 <read_EEPROM>
}
 284:	08 95       	ret

00000286 <led_on>:

void led_on(uint8_t modo, uint8_t place)
{
	if (modo == 1)
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	39 f4       	brne	.+14     	; 0x298 <led_on+0x12>
	{
		PORTB |= (1 << PORTB5);
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB4);
 290:	85 b1       	in	r24, 0x05	; 5
 292:	8f 7e       	andi	r24, 0xEF	; 239
 294:	85 b9       	out	0x05, r24	; 5
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <led_on+0x30>
	}
	else if (modo == 2)
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	39 f4       	brne	.+14     	; 0x2aa <led_on+0x24>
	{
		PORTB |= (1 << PORTB4);
 29c:	85 b1       	in	r24, 0x05	; 5
 29e:	80 61       	ori	r24, 0x10	; 16
 2a0:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB5);
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	8f 7d       	andi	r24, 0xDF	; 223
 2a6:	85 b9       	out	0x05, r24	; 5
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <led_on+0x30>
	}
	else
	{
		PORTB &= ~(1 << PORTB5);
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	8f 7d       	andi	r24, 0xDF	; 223
 2ae:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << PORTB4);
 2b0:	85 b1       	in	r24, 0x05	; 5
 2b2:	8f 7e       	andi	r24, 0xEF	; 239
 2b4:	85 b9       	out	0x05, r24	; 5
	}
	
	// Leds para posición
	if (place == 1)
 2b6:	61 30       	cpi	r22, 0x01	; 1
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <led_on+0x4e>
	{
		PORTC |= (1 << PORTC1);
 2ba:	88 b1       	in	r24, 0x08	; 8
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 2c0:	88 b1       	in	r24, 0x08	; 8
 2c2:	8e 7f       	andi	r24, 0xFE	; 254
 2c4:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 2c6:	88 b1       	in	r24, 0x08	; 8
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 2cc:	88 b1       	in	r24, 0x08	; 8
 2ce:	87 7f       	andi	r24, 0xF7	; 247
 2d0:	88 b9       	out	0x08, r24	; 8
 2d2:	08 95       	ret
	}
	else if (place == 2)
 2d4:	62 30       	cpi	r22, 0x02	; 2
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <led_on+0x6c>
	{
		PORTC |= (1 << PORTC2);
 2d8:	88 b1       	in	r24, 0x08	; 8
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 2de:	88 b1       	in	r24, 0x08	; 8
 2e0:	8e 7f       	andi	r24, 0xFE	; 254
 2e2:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 2e4:	88 b1       	in	r24, 0x08	; 8
 2e6:	8d 7f       	andi	r24, 0xFD	; 253
 2e8:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 2ea:	88 b1       	in	r24, 0x08	; 8
 2ec:	87 7f       	andi	r24, 0xF7	; 247
 2ee:	88 b9       	out	0x08, r24	; 8
 2f0:	08 95       	ret
	}
	else if (place == 3)
 2f2:	63 30       	cpi	r22, 0x03	; 3
 2f4:	69 f4       	brne	.+26     	; 0x310 <led_on+0x8a>
	{
		PORTC |= (1 << PORTC3);
 2f6:	88 b1       	in	r24, 0x08	; 8
 2f8:	88 60       	ori	r24, 0x08	; 8
 2fa:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 2fc:	88 b1       	in	r24, 0x08	; 8
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 302:	88 b1       	in	r24, 0x08	; 8
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 308:	88 b1       	in	r24, 0x08	; 8
 30a:	8d 7f       	andi	r24, 0xFD	; 253
 30c:	88 b9       	out	0x08, r24	; 8
 30e:	08 95       	ret
	}
	else
	{
		PORTC |= (1 << PORTC0);
 310:	88 b1       	in	r24, 0x08	; 8
 312:	81 60       	ori	r24, 0x01	; 1
 314:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC1);
 316:	88 b1       	in	r24, 0x08	; 8
 318:	8d 7f       	andi	r24, 0xFD	; 253
 31a:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC2);
 31c:	88 b1       	in	r24, 0x08	; 8
 31e:	8b 7f       	andi	r24, 0xFB	; 251
 320:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);
 322:	88 b1       	in	r24, 0x08	; 8
 324:	87 7f       	andi	r24, 0xF7	; 247
 326:	88 b9       	out	0x08, r24	; 8
 328:	08 95       	ret

0000032a <write_char>:
	}
}

void write_char(char caracter)
{	
	while (!(UCSR0A & (1 << UDRE0)));
 32a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 32e:	95 ff       	sbrs	r25, 5
 330:	fc cf       	rjmp	.-8      	; 0x32a <write_char>
	UDR0 = caracter;
 332:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 336:	08 95       	ret

00000338 <write_str>:
}

void write_str(char* texto)
{
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; *(texto+i) != '\0'; i++)
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	03 c0       	rjmp	.+6      	; 0x34a <write_str+0x12>
	{
		write_char(*(texto+i));
 344:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>
	UDR0 = caracter;
}

void write_str(char* texto)
{
	for(uint8_t i = 0; *(texto+i) != '\0'; i++)
 348:	cf 5f       	subi	r28, 0xFF	; 255
 34a:	f8 01       	movw	r30, r16
 34c:	ec 0f       	add	r30, r28
 34e:	f1 1d       	adc	r31, r1
 350:	80 81       	ld	r24, Z
 352:	81 11       	cpse	r24, r1
 354:	f7 cf       	rjmp	.-18     	; 0x344 <write_str+0xc>
	{
		write_char(*(texto+i));
	}
}
 356:	cf 91       	pop	r28
 358:	1f 91       	pop	r17
 35a:	0f 91       	pop	r16
 35c:	08 95       	ret

0000035e <serviltime>:

void serviltime(uint16_t* servil)
{
 35e:	dc 01       	movw	r26, r24
	*(servil) = 0;
 360:	11 96       	adiw	r26, 0x01	; 1
 362:	1c 92       	st	X, r1
 364:	1e 92       	st	-X, r1
	for (uint8_t i = 1; i < largo_buff; i++)
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	1b c0       	rjmp	.+54     	; 0x3a0 <serviltime+0x42>
	{
		*(servil) = *(servil) * 10 + (buffer[i] - '0');
 36a:	2d 91       	ld	r18, X+
 36c:	3c 91       	ld	r19, X
 36e:	11 97       	sbiw	r26, 0x01	; 1
 370:	a9 01       	movw	r20, r18
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	24 0f       	add	r18, r20
 384:	35 1f       	adc	r19, r21
 386:	e9 2f       	mov	r30, r25
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	e9 5d       	subi	r30, 0xD9	; 217
 38c:	fe 4f       	sbci	r31, 0xFE	; 254
 38e:	80 81       	ld	r24, Z
 390:	28 0f       	add	r18, r24
 392:	31 1d       	adc	r19, r1
 394:	20 53       	subi	r18, 0x30	; 48
 396:	31 09       	sbc	r19, r1
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	3c 93       	st	X, r19
 39c:	2e 93       	st	-X, r18
}

void serviltime(uint16_t* servil)
{
	*(servil) = 0;
	for (uint8_t i = 1; i < largo_buff; i++)
 39e:	9f 5f       	subi	r25, 0xFF	; 255
 3a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3a4:	98 17       	cp	r25, r24
 3a6:	08 f3       	brcs	.-62     	; 0x36a <serviltime+0xc>
	{
		*(servil) = *(servil) * 10 + (buffer[i] - '0');
	}
	
	if (*(servil) > 1023)
 3a8:	8d 91       	ld	r24, X+
 3aa:	9c 91       	ld	r25, X
 3ac:	11 97       	sbiw	r26, 0x01	; 1
 3ae:	81 15       	cp	r24, r1
 3b0:	24 e0       	ldi	r18, 0x04	; 4
 3b2:	92 07       	cpc	r25, r18
 3b4:	28 f0       	brcs	.+10     	; 0x3c0 <serviltime+0x62>
	*(servil) = 1023;
 3b6:	8f ef       	ldi	r24, 0xFF	; 255
 3b8:	93 e0       	ldi	r25, 0x03	; 3
 3ba:	8d 93       	st	X+, r24
 3bc:	9c 93       	st	X, r25
 3be:	08 95       	ret
	else if (*(servil) < 139)
 3c0:	8b 38       	cpi	r24, 0x8B	; 139
 3c2:	91 05       	cpc	r25, r1
 3c4:	20 f4       	brcc	.+8      	; 0x3ce <serviltime+0x70>
	*(servil) = 139;
 3c6:	8b e8       	ldi	r24, 0x8B	; 139
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	8d 93       	st	X+, r24
 3cc:	9c 93       	st	X, r25
 3ce:	08 95       	ret

000003d0 <main>:
void serviltime(uint16_t* servil);

// MAIN LOOP
int main(void)
{
	setup();
 3d0:	0e 94 84 00 	call	0x108	; 0x108 <setup>
	while (1)
	{	
		led_on(modo, place);
 3d4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 3d8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <modo>
 3dc:	0e 94 43 01 	call	0x286	; 0x286 <led_on>
		if (modo == 0)
 3e0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <modo>
 3e4:	81 11       	cpse	r24, r1
 3e6:	84 c0       	rjmp	.+264    	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
		{
			ADC_servo1 = ADC_read(6);
 3e8:	86 e0       	ldi	r24, 0x06	; 6
 3ea:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 3ee:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <ADC_servo1+0x1>
 3f2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <ADC_servo1>
			ADC_servo2 = ADC_read(7);
 3f6:	87 e0       	ldi	r24, 0x07	; 7
 3f8:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 3fc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADC_servo2+0x1>
 400:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADC_servo2>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 404:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <ADC_servo1>
 408:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <ADC_servo1+0x1>
 40c:	0a e1       	ldi	r16, 0x1A	; 26
 40e:	11 e0       	ldi	r17, 0x01	; 1
 410:	2c e1       	ldi	r18, 0x1C	; 28
 412:	31 e0       	ldi	r19, 0x01	; 1
 414:	ac 01       	movw	r20, r24
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 41c:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <ADC_servo2>
 420:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <ADC_servo2+0x1>
 424:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <ADC_servo1>
 428:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <ADC_servo1+0x1>
 42c:	2c e1       	ldi	r18, 0x1C	; 28
 42e:	31 e0       	ldi	r19, 0x01	; 1
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			
			OCR1A = PWM_1;
 436:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <PWM_1>
 43a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <PWM_1+0x1>
 43e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 442:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 446:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <PWM_2>
 44a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <PWM_2+0x1>
 44e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 452:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			ADC_servo3 = ADC_read(4);
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 45c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADC_servo3+0x1>
 460:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADC_servo3>
			PWM_3 = map_servo2(ADC_servo3);
 464:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 468:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <PWM_3>
			
			OCR2A = PWM_3; // Setear duty cycle
 46c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			ADC_servo4 = ADC_read(5);
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	0e 94 a1 00 	call	0x142	; 0x142 <ADC_read>
 476:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ADC_servo4+0x1>
 47a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADC_servo4>
			PWM_4 = map_servo2(ADC_servo4);
 47e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 482:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <PWM_4>
			
			OCR2B = PWM_4; // Setear duty cycle
 486:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			
			if (habilitar == 1)
 48a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <habilitar>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	29 f5       	brne	.+74     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			{
				save_(1, place, ADC_servo1);
 492:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <ADC_servo1>
 496:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <ADC_servo1+0x1>
 49a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 49e:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(2, place, ADC_servo2);
 4a2:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <ADC_servo2>
 4a6:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <ADC_servo2+0x1>
 4aa:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(3, place, ADC_servo3);
 4b4:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <ADC_servo3>
 4b8:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <ADC_servo3+0x1>
 4bc:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				save_(4, place, ADC_servo4);
 4c6:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <ADC_servo4>
 4ca:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <ADC_servo4+0x1>
 4ce:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	0e 94 1a 01 	call	0x234	; 0x234 <save_>
				habilitar = 0;
 4d8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <habilitar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4dc:	2f ef       	ldi	r18, 0xFF	; 255
 4de:	39 ef       	ldi	r19, 0xF9	; 249
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	30 40       	sbci	r19, 0x00	; 0
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	e1 f7       	brne	.-8      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4ec:	00 00       	nop
 4ee:	72 cf       	rjmp	.-284    	; 0x3d4 <main+0x4>
			}

			_delay_ms(20);  // Tiempo entre actualizaciones
		}
		
		else if (modo == 1)
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f4:	94 c0       	rjmp	.+296    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
		{
			ADC_servo1 = ((load_(1, place, 0)) << 8) | (load_(1, place, 1));
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 4fc:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 500:	c8 2f       	mov	r28, r24
 502:	d0 e0       	ldi	r29, 0x00	; 0
 504:	dc 2f       	mov	r29, r28
 506:	cc 27       	eor	r28, r28
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 514:	c8 2b       	or	r28, r24
 516:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <ADC_servo1+0x1>
 51a:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <ADC_servo1>
			ADC_servo2 = ((load_(2, place, 0)) << 8) | (load_(2, place, 1));
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 52a:	48 2f       	mov	r20, r24
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	d4 2f       	mov	r29, r20
 530:	cc 27       	eor	r28, r28
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 53e:	ae 01       	movw	r20, r28
 540:	48 2b       	or	r20, r24
 542:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <ADC_servo2+0x1>
 546:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <ADC_servo2>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 54a:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <ADC_servo1>
 54e:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <ADC_servo1+0x1>
 552:	0a e1       	ldi	r16, 0x1A	; 26
 554:	11 e0       	ldi	r17, 0x01	; 1
 556:	2c e1       	ldi	r18, 0x1C	; 28
 558:	31 e0       	ldi	r19, 0x01	; 1
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 560:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <ADC_servo2>
 564:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <ADC_servo2+0x1>
 568:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <ADC_servo1>
 56c:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <ADC_servo1+0x1>
 570:	2c e1       	ldi	r18, 0x1C	; 28
 572:	31 e0       	ldi	r19, 0x01	; 1
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			OCR1A = PWM_1;
 57a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <PWM_1>
 57e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <PWM_1+0x1>
 582:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 586:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 58a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <PWM_2>
 58e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <PWM_2+0x1>
 592:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 596:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			ADC_servo3 = ((load_(3, place, 0)) << 8) | (load_(3, place, 1));
 59a:	40 e0       	ldi	r20, 0x00	; 0
 59c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	d8 2f       	mov	r29, r24
 5aa:	cc 27       	eor	r28, r28
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 5b8:	9e 01       	movw	r18, r28
 5ba:	28 2b       	or	r18, r24
 5bc:	c9 01       	movw	r24, r18
 5be:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADC_servo3+0x1>
 5c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADC_servo3>
			PWM_3 = map_servo2(ADC_servo3);
 5c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 5ca:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <PWM_3>
			OCR2A = PWM_3; // Setear duty cycle
 5ce:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			ADC_servo4 = ((load_(4, place, 0)) << 8) | (load_(4, place, 1));
 5d2:	40 e0       	ldi	r20, 0x00	; 0
 5d4:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 5d8:	84 e0       	ldi	r24, 0x04	; 4
 5da:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	d8 2f       	mov	r29, r24
 5e2:	cc 27       	eor	r28, r28
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <place>
 5ea:	84 e0       	ldi	r24, 0x04	; 4
 5ec:	0e 94 35 01 	call	0x26a	; 0x26a <load_>
 5f0:	9e 01       	movw	r18, r28
 5f2:	28 2b       	or	r18, r24
 5f4:	c9 01       	movw	r24, r18
 5f6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ADC_servo4+0x1>
 5fa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADC_servo4>
			PWM_4 = map_servo2(ADC_servo4);
 5fe:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 602:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <PWM_4>
			OCR2B = PWM_4; // Setear duty cycle
 606:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 60a:	3f ef       	ldi	r19, 0xFF	; 255
 60c:	89 ef       	ldi	r24, 0xF9	; 249
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	31 50       	subi	r19, 0x01	; 1
 612:	80 40       	sbci	r24, 0x00	; 0
 614:	90 40       	sbci	r25, 0x00	; 0
 616:	e1 f7       	brne	.-8      	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
 618:	00 c0       	rjmp	.+0      	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
 61a:	00 00       	nop
 61c:	db ce       	rjmp	.-586    	; 0x3d4 <main+0x4>

			_delay_ms(20);  // Tiempo entre actualizaciones
		}
		
		else if (modo == 2)
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	09 f0       	breq	.+2      	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
 622:	d8 ce       	rjmp	.-592    	; 0x3d4 <main+0x4>
		{
			if (new_data == 1)
 624:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <new_data>
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	71 f5       	brne	.+92     	; 0x688 <__EEPROM_REGION_LENGTH__+0x288>
			{
				if (buffer[0] == '1')
 62c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <buffer>
 630:	81 33       	cpi	r24, 0x31	; 49
 632:	29 f4       	brne	.+10     	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
				{
					serviltime(&servil1);
 634:	83 e1       	ldi	r24, 0x13	; 19
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
 63c:	1f c0       	rjmp	.+62     	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
				}
				else if (buffer[0] == '2')
 63e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <buffer>
 642:	82 33       	cpi	r24, 0x32	; 50
 644:	29 f4       	brne	.+10     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
				{
					serviltime(&servil2);
 646:	81 e1       	ldi	r24, 0x11	; 17
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
 64e:	16 c0       	rjmp	.+44     	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
				}
				else if (buffer[0] == '3')
 650:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <buffer>
 654:	83 33       	cpi	r24, 0x33	; 51
 656:	29 f4       	brne	.+10     	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
				{
					serviltime(&servil3);
 658:	8f e0       	ldi	r24, 0x0F	; 15
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
 660:	0d c0       	rjmp	.+26     	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
				}
				else if (buffer[0] == '4')
 662:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <buffer>
 666:	84 33       	cpi	r24, 0x34	; 52
 668:	29 f4       	brne	.+10     	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
				{
					serviltime(&servil4);
 66a:	8d e0       	ldi	r24, 0x0D	; 13
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	0e 94 af 01 	call	0x35e	; 0x35e <serviltime>
 672:	04 c0       	rjmp	.+8      	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
				}
				else
				{
					write_str("invalido");
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	0e 94 9c 01 	call	0x338	; 0x338 <write_str>
				}
				write_char(buffer[0]);
 67c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <buffer>
 680:	0e 94 95 01 	call	0x32a	; 0x32a <write_char>

				new_data = 0;
 684:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <new_data>
			}
			
			ADC_servo1 = servil1;
 688:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <servil1>
 68c:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <servil1+0x1>
 690:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <ADC_servo1+0x1>
 694:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <ADC_servo1>
			ADC_servo2 = servil2;
 698:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <servil2>
 69c:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <servil2+0x1>
 6a0:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <ADC_servo2+0x1>
 6a4:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <ADC_servo2>
			ADC_servo3 = servil3;
 6a8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <servil3>
 6ac:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <servil3+0x1>
 6b0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADC_servo3+0x1>
 6b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADC_servo3>
			ADC_servo4 = servil4;
 6b8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <servil4>
 6bc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <servil4+0x1>
 6c0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <ADC_servo4+0x1>
 6c4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADC_servo4>
			
			mapeo_servo(1, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 6c8:	0a e1       	ldi	r16, 0x1A	; 26
 6ca:	11 e0       	ldi	r17, 0x01	; 1
 6cc:	2c e1       	ldi	r18, 0x1C	; 28
 6ce:	31 e0       	ldi	r19, 0x01	; 1
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			mapeo_servo(0, ADC_servo1, ADC_servo2, &PWM_1, &PWM_2);
 6d6:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <ADC_servo2>
 6da:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <ADC_servo2+0x1>
 6de:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <ADC_servo1>
 6e2:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <ADC_servo1+0x1>
 6e6:	2c e1       	ldi	r18, 0x1C	; 28
 6e8:	31 e0       	ldi	r19, 0x01	; 1
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	0e 94 b6 00 	call	0x16c	; 0x16c <mapeo_servo>
			OCR1A = PWM_1;
 6f0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <PWM_1>
 6f4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <PWM_1+0x1>
 6f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 6fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			OCR1B = PWM_2;
 700:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <PWM_2>
 704:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <PWM_2+0x1>
 708:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 70c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			
			PWM_3 = map_servo2(ADC_servo3);
 710:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ADC_servo3>
 714:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <ADC_servo3+0x1>
 718:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 71c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <PWM_3>
			OCR2A = PWM_3; // Setear duty cycle
 720:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			
			PWM_4 = map_servo2(ADC_servo4);
 724:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ADC_servo4>
 728:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <ADC_servo4+0x1>
 72c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <map_servo2>
 730:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <PWM_4>
			OCR2B = PWM_4; // Setear duty cycle
 734:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 738:	4d ce       	rjmp	.-870    	; 0x3d4 <main+0x4>

0000073a <__vector_5>:
	*(servil) = 139;
}

// Interrupt routines
ISR(PCINT2_vect)
{
 73a:	1f 92       	push	r1
 73c:	0f 92       	push	r0
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	8f 93       	push	r24
 746:	9f 93       	push	r25
	cli();
 748:	f8 94       	cli
 74a:	8f e1       	ldi	r24, 0x1F	; 31
 74c:	9e e4       	ldi	r25, 0x4E	; 78
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <__vector_5+0x14>
 752:	00 c0       	rjmp	.+0      	; 0x754 <__vector_5+0x1a>
 754:	00 00       	nop
	
	_delay_ms(5);
	// Si el pin está encendido en el pin 2 incrementa
	if (!(PIND & (1 << PORTD2)))
 756:	4a 99       	sbic	0x09, 2	; 9
 758:	0a c0       	rjmp	.+20     	; 0x76e <__vector_5+0x34>
	{
		modo++;
 75a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <modo>
 75e:	8f 5f       	subi	r24, 0xFF	; 255
 760:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <modo>
		if (modo == 3)
 764:	83 30       	cpi	r24, 0x03	; 3
 766:	a1 f4       	brne	.+40     	; 0x790 <__vector_5+0x56>
		{
			modo = 0;
 768:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <modo>
 76c:	11 c0       	rjmp	.+34     	; 0x790 <__vector_5+0x56>
		}
	}
	
	// Si el pin está encendido en el pin 4 incrementa
	else if (!(PIND & (1 << PORTD4)))
 76e:	4c 99       	sbic	0x09, 4	; 9
 770:	0a c0       	rjmp	.+20     	; 0x786 <__vector_5+0x4c>
	{
		place++;
 772:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <place>
 776:	8f 5f       	subi	r24, 0xFF	; 255
 778:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <place>
		if (place == 4)
 77c:	84 30       	cpi	r24, 0x04	; 4
 77e:	41 f4       	brne	.+16     	; 0x790 <__vector_5+0x56>
		{
			place = 0;
 780:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <place>
 784:	05 c0       	rjmp	.+10     	; 0x790 <__vector_5+0x56>
		}
	}
	
	// Si el pin está encendido en el pin 5 decrementa
	else if (!(PIND & (1 << PORTD5)))
 786:	4d 99       	sbic	0x09, 5	; 9
 788:	03 c0       	rjmp	.+6      	; 0x790 <__vector_5+0x56>
	{
		habilitar = 1;
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <habilitar>
	}
	sei();
 790:	78 94       	sei
}
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <__vector_18>:

ISR(USART_RX_vect)
{
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
	cli();
 7b2:	f8 94       	cli
	
	comando = UDR0;
 7b4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7b8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <comando>
			indice = 0;
		}
	}
	*/

	if (comando == ',') // Si la cadena termina en el caracter de "enter" entra al if
 7bc:	8c 32       	cpi	r24, 0x2C	; 44
 7be:	81 f4       	brne	.+32     	; 0x7e0 <__vector_18+0x40>
	{
		buffer[indice] = '\0';	// Termina el string
 7c0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <indice>
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	e9 5d       	subi	r30, 0xD9	; 217
 7c8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ca:	10 82       	st	Z, r1
		new_data = 1;					// Enciende la bandera de UART
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <new_data>
		largo_buff = indice;
 7d2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <indice>
 7d6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		indice = 0;				// Reinicia el índice del buffer
 7da:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <indice>
 7de:	0e c0       	rjmp	.+28     	; 0x7fc <__vector_18+0x5c>
	}
	else
	{
		if (indice < sizeof(buffer) - 1) // Mientras que el índice del caracter recibido sea menor que el tamaño de la lista (Buffer) entra al if
 7e0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <indice>
 7e4:	99 30       	cpi	r25, 0x09	; 9
 7e6:	50 f4       	brcc	.+20     	; 0x7fc <__vector_18+0x5c>
		{
			buffer[indice++] = comando;	// Guarda en la lista el caracter recibido y suma uno al índice de la lista
 7e8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <indice>
 7ec:	91 e0       	ldi	r25, 0x01	; 1
 7ee:	9e 0f       	add	r25, r30
 7f0:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <indice>
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	e9 5d       	subi	r30, 0xD9	; 217
 7f8:	fe 4f       	sbci	r31, 0xFE	; 254
 7fa:	80 83       	st	Z, r24
		}
	}

	//write_char(comando);
	
	sei();
 7fc:	78 94       	sei
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	9f 91       	pop	r25
 804:	8f 91       	pop	r24
 806:	0f 90       	pop	r0
 808:	0f be       	out	0x3f, r0	; 63
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <__udivmodsi4>:
 810:	a1 e2       	ldi	r26, 0x21	; 33
 812:	1a 2e       	mov	r1, r26
 814:	aa 1b       	sub	r26, r26
 816:	bb 1b       	sub	r27, r27
 818:	fd 01       	movw	r30, r26
 81a:	0d c0       	rjmp	.+26     	; 0x836 <__udivmodsi4_ep>

0000081c <__udivmodsi4_loop>:
 81c:	aa 1f       	adc	r26, r26
 81e:	bb 1f       	adc	r27, r27
 820:	ee 1f       	adc	r30, r30
 822:	ff 1f       	adc	r31, r31
 824:	a2 17       	cp	r26, r18
 826:	b3 07       	cpc	r27, r19
 828:	e4 07       	cpc	r30, r20
 82a:	f5 07       	cpc	r31, r21
 82c:	20 f0       	brcs	.+8      	; 0x836 <__udivmodsi4_ep>
 82e:	a2 1b       	sub	r26, r18
 830:	b3 0b       	sbc	r27, r19
 832:	e4 0b       	sbc	r30, r20
 834:	f5 0b       	sbc	r31, r21

00000836 <__udivmodsi4_ep>:
 836:	66 1f       	adc	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	1a 94       	dec	r1
 840:	69 f7       	brne	.-38     	; 0x81c <__udivmodsi4_loop>
 842:	60 95       	com	r22
 844:	70 95       	com	r23
 846:	80 95       	com	r24
 848:	90 95       	com	r25
 84a:	9b 01       	movw	r18, r22
 84c:	ac 01       	movw	r20, r24
 84e:	bd 01       	movw	r22, r26
 850:	cf 01       	movw	r24, r30
 852:	08 95       	ret

00000854 <__umulhisi3>:
 854:	a2 9f       	mul	r26, r18
 856:	b0 01       	movw	r22, r0
 858:	b3 9f       	mul	r27, r19
 85a:	c0 01       	movw	r24, r0
 85c:	a3 9f       	mul	r26, r19
 85e:	70 0d       	add	r23, r0
 860:	81 1d       	adc	r24, r1
 862:	11 24       	eor	r1, r1
 864:	91 1d       	adc	r25, r1
 866:	b2 9f       	mul	r27, r18
 868:	70 0d       	add	r23, r0
 86a:	81 1d       	adc	r24, r1
 86c:	11 24       	eor	r1, r1
 86e:	91 1d       	adc	r25, r1
 870:	08 95       	ret

00000872 <_exit>:
 872:	f8 94       	cli

00000874 <__stop_program>:
 874:	ff cf       	rjmp	.-2      	; 0x874 <__stop_program>
